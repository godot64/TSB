
	*= $cb00

; ----------------------------------- bef MAP
;
; MAP writes 2x2 char patterns into screen ram to build
; game worlds, each pattern is single colored
;
; Syntax:
;
; MAP row, column, pattern$, cols%(n)
;
; ROW and COLUMN are screen positions. They get internally
; doubled, so max length of PATTERN$ is 20.
; PATTERN$ contains a map for tiles in a playing ground
; (and may (or should) be an array), base code is 35 (#).
; The tiles are character set based, every 4 chars
; build a 2x2 tile and get addressed by PATTERN$ bytes.
; COLORS% contains the base color of each tile in the map
; (and *must* be an array of integers, max N for one
; tileset is 48).
;
; v1.03 2024-02-06
; v1.04 2024-05-03	: bugfix in FILLPAT (crashed $CA00!)
;
; -----------------------------------

	neo	= 1

	int	= $14		; word, integer value
	progz	= $7a		; basic program pointer
	helpvec	= $b0
	helpvc2	= $b2
	helpvc3	= $b4
	video	= $0288		; current address of video (high byte)

!if neo=0 {
; TSB:
	schkcom	= $8030		; checks for comma
	chkscolon	= $813e		; checks for all following data
	sgetbytc	= $81fc		; get byte value (to .x) after checking for comma
	sgetbytn	= $8202		; get byte value (to .x) after proceeding 1 byte
	endsmb	= $8229		; finish TSB command
	incbasbz	= $83d8		; increment basic pointer
	sgetstr	= $86b6		; get string
} else {
; TSBneo:
	schkcom	= $8b89		; checks for comma
	chkscolon	= $8bc7		; checks for all following data
	sgetbytc	= $8c34		; get byte value (to .x) after checking for comma
	sgetbytn	= $8c2f		; get byte value (to .x) after proceeding 1 byte
	endsmb	= $80d2		; finish TSB command
	incbasbz	= $8e2a		; increment basic pointer
	sgetstr	= $8c3d		; get string
}
	setcol	= $c9f1
	setvram	= setcol+4	; routine to set data
	pcolor	= setvram+5
	setcram	= setvram+7

; ----------------------------------- MAP: FILL with 2x2 tiles derived from pattern$
; every 4 pattern values must be consecutive (1, then 2..3..4)

fillpat	lda $c9ff		; already running?
	cmp #$60
	beq +
	ldx #(modend-setvals-1)
-	lda setvals,x	; no, install
	sta setcol,x
	dex
	bpl -

+	lda video		; get video address hi
	sta setvram+2
	lda #$d8		; get color ram address hi
	sta setcram+1

	jsr sgetbytn	; get value ROW to .x
	stx helpvc2
	jsr sgetbytc	; get value COLUMN to .x
	stx setvram+1	; store to video...
	stx setcram	; and to color ram pointers

	ldx helpvc2	; ROW:
torow	dex		; if 0: skip computation of screen row
	bmi writemap	; continue
	clc		; compute screen row address (add 40 .x times)
	lda setvram+1
	adc #40
	sta setvram+1
	bcc +
	inc setvram+2
	clc		; add 40 to color ram respectively
+	lda setcram
	adc #40
	sta setcram
	bcc torow
	inc setcram+1
	bne torow		; loop to reach correct row

; -----------------------------------

writemap	jsr schkcom	; get pattern string (e.g. string array MA$):
	jsr sgetstr	; len 69, adr 22/3 in .a and .x
	sta helpvec+1
	stx helpvec
	lda $69
	pha		; save len (to check for len=0 later)
	sta patlen+1	; set individual LEN (other than 20)

	jsr sgetbytc	; get color array (e.g. array CO%, returns addr in $47/8)
	ldx $47		; get addr of 1st value in array...
	ldy $48
	inx
	stx setcol+1
	bne +
	iny
+	sty setcol+2	; ...and set address
	pla		; reget len of string
	beq empty		; if 0: skip map output

; ----------------------------------- Map output
;
	ldy #0		; init .x and .y
	ldx #0

loop	lda (helpvec),y	; get pattern from MA$ (petscii code number)
	cmp #32		; skip "space"...
	beq skip2
	cmp #160		; or "shift space" (faster)
	beq skip2

	sec		; subtract base value 35 from pattern value
	sbc #35
	stx helpvc3	; save .x (as index into charset)
	asl		; double pattern value (for CO% distances)
	tax		; shift value to .x as index into CO%
;
	jsr setcol	; get color value from CO%
	sta pcolor	; store for whole tile

	txa		; double index again (every 4 chars are 1 tile)
	ldx helpvc3	; reget .x (charset index)
	asl
	clc		; add 64 (offset to char "@")
	adc #$40
	jsr setvram	; store pattern and color
	adc #1		; proceed to next pattern, same color,
	inx		; next position:
	jsr setvram	; store, we now have processed pattern "ab"
	adc #1
	pha		; save pattern to stack
	txa		; add 39 to .x (position)
	adc #39
	tax
	pla		; reget pattern
	jsr setvram	; store pattern and color one row below
	adc #1		; proceed to next pattern, same color,
	inx		; next position:
	jsr setvram	; store, we now have processed pattern "ab"
			; 			         "cd"
	txa		; subtract 41 from .x (position)
	sec
	sbc #41
	tax

skip2	inx		; add 2 to .x for color values (are in an INT array)
	inx
	iny		; add 1 to .y (for next pattern)
patlen	cpy #20		; reached LEN? (all patterns processed?)
	bcc loop		; no, loop to proceed

empty	jmp endsmb	; command finished

; ----------------------------------- Store to Screen
; runs at $c9f1
setvals	lda $0000,x	; get color value from CO%
	rts
	sta $0000,x	; store .a to video
	pha		; keep value
	lda #0		; color (preset: blk)
	sta $0000,x	; store to color ram
	pla		; reget value
	rts
; -----------------------------------

modend	!eof

