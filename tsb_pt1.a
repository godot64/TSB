; ----------------------------------------- 
;
; Tuned Simons' Basic
;
; by Arndt Dettke, 1986
;
; part 1
;
; patched on 13.01.2021
; patched on 25.01.2021 (tables)
; patched on 13.03.2021 (command COLD, Reset, Stop/Restore)
; patched on 21.04.2021 (command RENUMBER)
; patched on 25.08.2021 (make OPEN independent from drive number)
; patched on 05.10.2021 (added DIV as a command to Clear Screen)
;
; ----------------------------------------- 

	!ct pet

; ----------------------------------------- 

startvec	!wo sstart
smnivec	!wo sbnmi

; ----------------------------------------- 

modultext	!tx "CBM80"

; ----------------------------------------- 

	!by $ad

; ----------------------------------------- 

sstart	jmp befcold

; ----------------------------------------- Calls to BASIC ROM
; 800d
sfrmnum	jsr pspeibe
	jsr $ad8a		; get numerical expression
	jmp prestor
; 8016
sfacadr	jsr pspeibe
	jsr $b7f7		; FAC to word (.y=lo, .a=hi, :INT)
	jmp prestor
; 801f
ssin	jsr pspeibe
	jsr $e26b		; func SIN
	jmp prestor
; 802b
scos	jsr pspeibe
	jsr $e264		; func COS
	jmp prestor
; 8031
schkcom	jsr pspeibe
	jsr $aefd		; check for comma
	jmp prestor
; 803a
sfrmevl	jsr pspeibe
	jsr $ad9e		; retrieve expression
	jmp prestor
; 8043
sfrestr	jsr pspeibe
	jsr $b6a3		; retrieve string parameters
	jmp prestor
; 804c
sintout	jsr pspeibe
	jsr $bdd1		; out digits in .a (hi) and .x (lo)
	jmp prestor
; 8055
sgoto1	jsr pspeibe
	jsr $a8a3		; bef GOTO (to line in INT)
	jmp prestor
; 805e
schkzei	jsr pspeibe
	jsr $aeff		; check if char in .a is at pz
	jmp prestor
; 8067
sxflppl	jsr pspeibe
	jsr $bc44		; integer to float (hi: $62, lo: $63, .x:#$90)
	jmp prestor
; 8070
sstrpz	jsr pspeibe
	jsr $a613		; compute address of line start (number in INT)
	jmp prestor
; 8079
sascflp	jmp $bcf3		; digits from basic to float
; 807c
sgetari1	jmp $ae92		; get arithmetical expression from basic
; 807f
schkklz	jsr pspeibe
	jsr $aef7		; check for "Klammer zu"
	jmp prestor
; 8088
sxflp	jsr pspeibe
	jsr $bc49		; convert to FAC (.x=exponent)
	jmp prestor
; 8091
sfacarg	jsr pspeibe
	jsr $bc0c		; FAC to ARG
	jmp prestor
; 809a
sfmult	jsr pspeibe
	jsr $ba30		; FAC*ARG
	jmp prestor
; 80a3
sfldfack	jsr pspeibe
	jsr $bba2		; const (.a=lo, .y=hi) to FAC
	jmp prestor
; 80ac
sfdiv	jsr pspeibe
	jsr $bb14		; ARG/FAC
	jmp prestor
; 80b5
sfacasc	jsr pspeibe
	jsr $bddd		; FAC to ASCII (in $0100)
	jmp prestor
; 80be
sgetvar	jsr pspeibe
	jsr $b08b		; get var from basic
	jmp prestor
; 80c7
stestdirm	jsr pspeibe
	jsr $b3a6		; check for direct mode (error if yes)
	jmp prestor
; 80d0
sclrch	jsr pspeibe
	jsr $abb5		; clear open device channels
	jmp prestor
; 80d9
srem	jsr pspeibe
	jsr $a8f8		; find colon and add to progz
	jmp prestor
; 80e2
snexttr	jsr pspeibe
	jsr $a906		; find colon, offset in .y
	jmp prestor
; 80eb
sinput1	jsr pspeibe
	jsr $ac0d		; bef INPUT
	jmp prestor
; 80f4
spuf0cr	jsr pspeibe
	jsr $aaca		; write buffer $0200 and cr
	jmp prestor
; 80fd
sbzply	jsr pspeibe
	jsr $a8fb		; progz plus .y
	jmp prestor
; 8106
sgetbyt1	jsr pspeibe
	jsr $b79e		; getbyt from basic (to .x)
	jmp prestor
; 810f
sbind	jsr pspeibe
	jsr $a533		; bind basic lines
	jmp prestor
; 8118
ssmni	lda pport
	sta pspeinmi
	jsr kerromein
	jmp $fe43		; sys NMI
; 8123
sopen	jsr pspeibe
	jsr newopen	; bef OPEN (with TSB drive)
	jmp prestor

; ----------------------------------------- 
; 812c
pspeibe	sta zwspei1
	lda pport
	sta portspei
	jsr basromei
	lda zwspei1
	rts
; 813b
prestor	sta zwspei1
	lda portspei
	sta pport
	lda zwspei1
	rts

; ----------------------------------------- Bef COLD (TSB)
; 8147			recoded
befcold	jsr basromei
	ldx #$00
	stx ramstart
	stx doindex
	ldy #$80
	jsr $fd8c		; sys set memory top
	jsr $e453		; sys load basic vectors ($0300..$030b)
	jsr $e3bf		; sys init ram
	sei
	jsr $fda3		; sys init cias
	jsr colsout	; sys init VIC and keyboard, set TSB colors
	lda #0
	tax
-	sta faststack,x
	sta settings1,x
	sta settings2,x
	inx
	bne -
into	jsr cold1		; set drive 8 and LOAD/SAVE vectors
	ldx #11
-	lda tsbvecs,x
	sta basvecs,x
	dex
	bpl -
	ldx #$81
	stx $fffa+1	; sys nmi vector hi ($8118)
	inx
	stx nmivec+1	; NMI = $82fa
	inx
	stx brkvec+1
	lda #<sbrk	; SBRK = $8314!
	sta brkvec
	lda #$18
	sta $fffa		; sys nmi vector lo
	lda #$fa
	sta nmivec
	cli
	lda $2b		; get start of basic program
	ldy $2c
	jsr $a408		; sys free memory
	jsr $e422		; sys out start message of sb
	ldx #$fb
	txs
	jmp dscbmout	; set colors, show "tuned"

; ----------------------------------------- 
; 81ae
tsbvecs	!wo warmstart,sloop,zeiumw,slist,sbasbef,sgetari

; ----------------------------------------- 
; 81ba
tsbpudef	!by $23,$2a,$2c,$2e,$2b,$2d	; #*,.+-

; ----------------------------------------- bef DIV (Clear Video)
; 81c0
befdiv	jsr clear		; clear screen
	jmp bef0

; ----------------------------------------- part of USE
; 81c6
useready	pla
	pla
	lda #$00
	jsr genout
	jsr basromei
	lda #$a7		; address of outstring ($02a7)
	ldy #$02
	jsr $ab1e		; sys string out
	jsr chrgot
	bne +
	jmp $aad7		; sys cr/lf out if end of command

; ----------------------------------------- 
; 81df
+	lda #$3b		; ";"?
use6	ldy #0		; compare to running code char
	cmp (progz),y	; if not equal: error bad mode
	bne +
	jmp chrget	; and get next if equal

+	jmp swarm		; otherwise: bad mode

; ----------------------------------------- 
; 81ed			recoded
use0	jsr sgetbytn	; USE #n
	stx $13		; .x= device #
	jsr $e4ad		; sys: basic ckout
	bcs use2		; on error: continue anyway
	jsr schkcom	; comma?
	bne use2		; uncond. branch

; ----------------------------------------- 
; 81fc
sgetbytc	jsr schkcom
	jmp sgetbyt1

; ----------------------------------------- 
; 8202
sgetbytn	jsr incbasbz
	jmp sgetbyt1

; ----------------------------------------- 
; 8208
	jsr incbasbz	; USE?

; ----------------------------------------- bef USE
; 820b			recoded
befuse	jsr chrget	; next char: digit?
	bcc +		; yes, branch

	cmp #$23		; "#"?
	beq use0		; yes, open file (81ec)

use2	jmp use1		; no, continue normal use (9ce3)

+	jmp usedrv	; change drive#

; ----------------------------------------- 

	!by 0

; ----------------------------------------- part of TRACE
; 821b
trace6	dex
	txa
	ora #$80
	ldx #>tabbef
	stx $21
	ldx #<tabbef
	stx $20
	jmp trace7

; ----------------------------------------- 
; 822a
endsmb	jsr kerromein
	cli
	jsr basromei
	jmp $a7ae		; sys: Interpreter

; ----------------------------------------- 
; 8234
zeiumw	jsr basromau
	jsr zeiumw1
	jsr basromei
	jmp $a57c		; sys: tokenizer

; ----------------------------------------- 
; 8240
slist	php
	pha
	jsr basromau
	pla
	plp
	jmp slist3

; ----------------------------------------- 
; 824a
slist1	pha
	jsr basromei
	pla
	plp
	jmp $a71a		; sys: detokenizer

; ----------------------------------------- 
; 8253
slist2	pha
	jsr basromei
	pla
	plp
	jmp $a6f6		; sys: part of LIST

; ----------------------------------------- Eingabewarteschleife
; 825c			recoded
sloop	sei
	lda #>sirq	; change irq to tsb
	sta irqvec+1
	lda #<sirq
	sta irqvec
	sta playflag
	ldx #0
	stx $d01a
	stx onerrorflag
	stx onkeyflag
	stx basbzk+1
	stx doflag
	cli
	lda $d011
	and #$20
	beq +
	inx		; (.x not needed anymore)
	jsr basromau
	jsr nrm01		; do NRM
+	jsr basromei
	lda autoflag
	cmp #10
	beq auto
	jmp $a483		; sys Eingabewarteschleife

; ----------------------------------------- 
; 8297			enhanced
auto	clc
	lda autozi
	adc autoinc
	sta $63
	sta autozi
	lda autozi+1
	adc #0
	sta $62
	sta autozi+1
	jsr sxyflp2
	jsr $bddf		; sys fac2ascii
	ldx #0
-	lda linenum,x
	beq +
	sta keybuf,x
	inx
	bne -
+	lda #$20		; space
	sta keybuf,x
	inx
	stx numkeys
	lda #0
	sta autoflag
	jsr $a560		; sys Basiczeile einlesen
	sty $aa

	ldy #0
-	iny
	lda basinbuf,y
	beq +
	cmp #$3a		; ":"?
	bcc -
	cmp #$5b		; "["? (beyond "z"?)
	bcs -
	lda #10
+	sta autoflag

	ldy $aa
	jmp $a486		; sys Eingabewarteschleife (ohne inc)

; ----------------------------------------- 
; 82ec
basromau	lda pport
	and #$fe
	sta pport
	rts

; ----------------------------------------- 
; 82f3
basromei	lda pport
	ora #$01
	sta pport
	rts

; ----------------------------------------- 
; 82fa
snmi	pha
	txa
	pha
	tya
	pha
	jsr kerromein
	lda #$7f
	sta $dd0d
	ldy $dd0d
	bmi rs232nmi
	jsr $f6bc		; sys STOP?
	jsr $ffe1		; sysvec really STOP?
	bne rs232nmi

; ----------------------------------------- 
; 8314
sbrk	lda #$04
	sta video		; video at $0400
	jsr $fda3		; set CIAs
	jsr $e518		; sys init screen
	jsr tsbcols	; set colors, returns .a=0
	sta $d4
	sta mobbew
	sta gmemflag
	lda #14		; CTRL n:
	sta playflag
	jsr bsout		; cset 1
	jmp ($a002)	; system nmi

rs232nmi	jmp $fe72		; nmi when rs323

; ----------------------------------------- bef MERGE (TSB)
; 8338			recoded
befmerge	jsr incbasbz
	jsr basromei
	lda #0		; force LOAD
	sta $0a
	jsr $e1d4		; sys get params for LOAD/SAVE
	lda $0a
	ldx $2d		; get basic start
	ldy $2e
	jsr load
	bcs +
	jsr $ffb7		; sys read status
	and #$bf		; EOF?
	beq ++
	jmp $e19c		; sys yes, load error
+	jmp $e0f9		; sys no, break in...

; ----------------------------------------- 
; 835d
++	jsr basromau
	jsr domerge	; continue MERGE:
endmrge	jsr $a660		; sys clear
	jmp $a474		; sys out: ready.

; ----------------------------------------- 
; 8369
schkstr	jsr pspeibe
	jsr $ad8f		; sys check for string
	jmp prestor

; ----------------------------------------- bef RENUMBER (TSB)
; 8372			recoded
befrenum	jsr get10010	; .a=0
	beq +

	jsr sgetadr	; get start line number
	sty $a4		; result in .y (lo) and .a (hi)
	sta $a5
	jsr isstep0	; get step, is it 0? Doesn't retrurn if	yes
	sty ay		; in .y (lo) and in...
	jsr basromau
	lda $c4

+	jsr renum0
	jsr renum1

-	lda ($a8),y
	sta $09
	jsr inca8a9
	lda ($a8),y
	sta $0a
	jsr inca8a9
	iny
	lda $a5
	cmp #$fa
	bcs sbready
	sta ($a8),y
	dey
	lda $a4
	sta ($a8),y
	lda $09
	ora $0a
	beq sbready
	jsr ren0
	lda $a4
	adc ay
	sta $a4
	lda $a5
	adc ay+1
	sta $a5
	bcc -

; 83c4
sbready	jsr $a659		; sys basic bef CLR
	jmp $a474		; sys out: ready.

; ----------------------------------------- 
; 83ca
tsbcols	ldx #12		; backgr: mgr
	stx $d021
	dex		; border: dgr
	stx $d020
	lda #0		; cursor: blk
	sta aktfarb
	rts

; ----------------------------------------- 
; 83d9
incbasbz	inc progz
	bne +
	inc progz+1
+	rts

; ----------------------------------------- Table of Commands
; 83e0
tabbef	!tx "hires@"	; 1
	!tx "plot@"
	!tx "line@"
	!tx "block@"
	!tx "fchr@"
	!tx "fcol@"
	!tx "fill@"
	!tx "rec@"
	!tx "rot@"	; 9
	!tx "draw@"
	!tx "char@"
	!tx "hi col@"
	!tx "inv@"
	!tx "frac@"
	!tx "move@"
	!tx "place@"
	!tx "upb@"	; 17
	!tx "upw@"
	!tx "leftw@"
	!tx "leftb@"
	!tx "downb@"
	!tx "downw@"
	!tx "rightb@"
	!tx "rightw@"
	!tx "multi@"	; 25
	!tx "colour@"
	!tx "mmob@"
	!tx "bflash@"
	!tx "mob set@"
	!tx "music@"
	!tx "flash@"
	!tx "repeat@"
	!tx "play@"	; 33
	!tx "do@"
	!tx "centre@"
	!tx "envelope@"
	!tx "cgoto@"
	!tx "wave@"
	!tx "fetch@"
	!tx "at(@"
	!tx "until@"	; 41
	!tx ">@"		; *
	!tx ">@"		; +
	!tx "use@"
	!tx ">@"		; -
	!tx "global@"
	!tx ">@"		; /
	!tx "reset@"
	!tx "proc@"	; 49
	!tx "call@"
	!tx "exec@"
	!tx "end proc@"
	!tx "exit@"
	!tx "end loop@"
	!tx "on key@"
	!tx "disable@"
	!tx "resume@"	; 57
	!tx "loop@"
	!tx "delay@"
	!tx ">@"		; <
	!tx ">@"		; =
	!tx ">@"		; >
	!tx ">@"		; ?
	!tx "secure@"
	!tx "disapa@"	; 65
	!tx "circle@"
	!tx "on error@"
	!tx "no error@"
	!tx "local@"
	!tx "rcomp@"
	!tx "else@"
	!tx "retrace@"
	!tx "trace@"	; 73
	!tx "dir@"
	!tx "page@"
	!tx "dump@"
	!tx "find@"
	!tx "option@"
	!tx "auto@"
	!tx "old@"
	!tx "joy@"	; 81
	!tx "mod@"
	!tx "div@"
	!tx "d!@"
	!tx "dup@"
	!tx "inkey@"
	!tx "inst@"
	!tx "test@"
	!tx "lin@"	; 89
	!tx "exor@"
	!tx "insert@"
	!tx "pot@"
	!tx "penx@"
	!tx ">@"		; ^
	!tx "peny@"
	!tx "sound@"
	!tx "graphics@"	; 97
	!tx "design@"
	!tx "rlocmob@"
	!tx "cmob@"
	!tx "bckgnds@"
	!tx "pause@"
	!tx "nrm@"
	!tx "mob@"
	!tx "off@"	; 105
	!tx "angl@"
	!tx "arc@"
	!tx "cold@"
	!tx "scrsv@"
	!tx "scrld@"
	!tx "text@"
	!tx "cset@"
	!tx "vol@"	; 113
	!tx "disk@"
	!tx "hrdcpy@"
	!tx "key@"
	!tx "paint@"
	!tx "low col@"
	!tx "copy@"
	!tx "merge@"
	!tx "renumber@"	; 121
	!tx "mem@"
	!tx "detect@"
	!tx "check@"
	!tx "display@"
	!tx "err@"
	!tx "out@"

; ----------------------------------------- 
; 8693
xipr3	sty doindex
	sty sprepeat
	rts

; ----------------------------------------- 
; 869a
	!by 0,0,0,0,0	; 5 bytes

; ----------------------------------------- 
; 869f
tuned	!tx $0e,$08," tuned", $0d	; tsb start message 
	!by 0

; ----------------------------------------- 
; 86a9
tsbblcopy	jsr pspeibe
	jsr $a3b8		; sys block copy
	jmp prestor

; ----------------------------------------- 
; 86b2 / 86b5
sgetstrn	jsr incbasbz
sgetstr	jsr sfrmevl	; get string from basic
	jsr sfrestr
	sta $69		; len
	lda $23		; location
	ldx $22
	rts

; ----------------------------------------- Table of BEFs
; 86c2
sprtab	!wo befhires-1	;   1 $9202 hires
	!wo befplot-1	;   2 $9267 plot
	!wo befline-1	;   3 $9350 line
	!wo befblock-1	;   4 $bbcc block
	!wo movebef-1	;   5 $ac5d fchr
	!wo movebef-1	;   6 $ac5d fcol
	!wo movebef-1	;   7 $ac5d fill
	!wo befrec-1	;   8 $baf8 rec
	!wo befrot-1	;   9 $a15e rot
	!wo befdraw-1	;  10 $a057 draw
	!wo befchar-1	;  11 $a186 char
	!wo befhicol-1	;  12 $a270 hi col
	!wo movebef-1	;  13 $ac5d inv
	!wo swarm-1	;     $9e9a bad mode (fn frac)
	!wo movebef-1	;  15 $ac5d move
vecplace	!wo befplace-1	;  16 $ccd7 place    (changed from 86e2)
	!wo movebef-1	;  17 $ac5d upb
	!wo movebef-1	;  18 $ac5d upw
	!wo movebef-1	;  19 $ac5d leftw
	!wo movebef-1	;  20 $ac5d leftb
	!wo movebef-1	;  21 $ac5d downb
	!wo movebef-1	;  22 $ac5d downw
	!wo movebef-1	;  23 $ac5d rightb
	!wo movebef-1	;  24 $ac5d rightw
	!wo befmulti-1	;  25 $94e9 multi
	!wo befcolour-1	;  26 $952d colour
	!wo befmmob-1	;  27 $95c8 mmob
	!wo befbflash-1	;  28 $966d bflash
	!wo befmobset-1	;  29 $96da mob set
	!wo befmusic-1	;  30 $9759 music
	!wo befflash-1	;  31 $9790 flash
	!wo befrepeat-1	;  32 $9af7 repeat
	!wo befplay-1	;  33 $9918 play
	!wo befdo-1	;  34 $b570 do, done, do null
	!wo befcentre-1	;  35 $9947 centre
	!wo befenvelope-1	;  36 $9979 envelope
	!wo befcgoto-1	;  37 $99e8 cgoto
	!wo befwave-1	;  38 $99f7 wave
	!wo beffetch-1	;  39 $b004 fetch
	!wo befat-1	;  40 $b8b4 at       (fn at)
	!wo befuntil-1	;  41 $9b15 until
	!wo swarm-1	;     (*)
	!wo swarm-1	;     (+)
	!wo befuse-1	;  44 $820b use
	!wo swarm-1	;     (-)
	!wo befglobal-1	;  46 $a341 global
	!wo swarm-1	;     (/)
	!wo befreset-1	;  48 $9c05 reset
	!wo befproc-1	;  49 $9e33 proc
	!wo befcall-1	;  50 $9c64 call
	!wo befexec-1	;  51 $9ce4 exec
	!wo befendproc-1	;  52 $9d11 end proc
	!wo befexit-1	;  53 $9d2f exit
	!wo befendloop-1	;  54 $c97e end loop
	!wo befonkey-1	;  55 $9d70 on key
	!wo befdisable-1	;  56 $9da2 disable
	!wo befresume-1	;  57 $9df7 resume
	!wo befloop-1	;  58 $9e55 loop
	!wo befdelay-1	;  59 $c947 delay
	!wo swarm-1	;     (<)
	!wo swarm-1	;     (=)
	!wo swarm-1	;     (>)
	!wo swarm-1	;     (?)
	!wo befsecure-1	;  64 $c950 secure
	!wo bef0-1	;  65 $9174 disapa
	!wo befcircle-1	;  66 $9489 circle
	!wo befonerror-1	;  67 $9e71 on error
	!wo befnoerr-1	;  68 $9e93 no error
	!wo beflocal-1	;  69 $a2fa local
	!wo befrcomp-1	;  70 $9f1f rcomp
	!wo befelse-1	;  71 $a2c6 else
	!wo befretrace-1	;  72 $9b48 retrace
	!wo beftrace-1	;  73 $9b5a trace
	!wo befdir-1	;  74 $9544 dir
	!wo befpage-1	;  75 $9836 page
	!wo befdump-1	;  76 $9f3a dump
	!wo beffind-1	;  77 $a594 find
	!wo befoption-1	;  78 $9b63 option
	!wo befauto-1	;  79 $9bd6 auto
	!wo befold-1	;  80 $9eda old
	!wo swarm-1	;     $9e9a bad mode (fn joy)
	!wo befmod-1	;  82 $bfe3 mod      (fn mod)
	!wo befdiv-1	;     $81bd div	 (fn div)
	!wo befdelete-1	;  84 $b8ea d!
	!wo befdup-1	;  85 $b7b8 dup      (fn dup)
	!wo swarm-1	;     $9e9a bad mode (fn inkey)
	!wo befinst-1	;  87 $ca1a inst     (fn inst)
	!wo swarm-1	;     $9e9a bad mode (fn test)
	!wo beflin-1	;  89 $c83d lin      (fn lin)
	!wo swarm-1	;     $9e9a bad mode (fn exor)
	!wo befinsert-1	;  91 $af42 insert   (fn insert)
	!wo swarm-1	;     $9e9a bad mode (fn pot)
	!wo swarm-1	;     $9e9a bad mode (fn penx)
vecbmode	!wo swarm-1	;     (^)
	!wo swarm-1	;     $9e9a bad mode (fn peny)
	!wo swarm-1	;     $9e9a bad mode (fn sound)
	!wo befgraphics-1	;  97 $8bea graphics (fn graphics)
	!wo befdesign-1	;  98 $a62e design
	!wo befrlocm-1	;  99 $a768 rlocmob
	!wo befcmob-1	; 100 $a7a6 cmob
	!wo befbckgnds-1	; 101 $a7b5 bckgnds
	!wo befpause-1	; 102 $a7e2 pause
	!wo befnrm-1	; 103 $a831 nrm      (fn nrm, 90df)
	!wo befmoboff-1	; 104 $a856 mob off
	!wo befoff-1	; 105 $a865 off
	!wo befangl-1	; 106 $ab10 angl
	!wo befarc-1	; 107 $a876 arc
	!wo befcold-1	; 108 $8147 cold
	!wo befscrsv-1	; 109 $b191 scrsv
	!wo befscrld-1	; 110 $b1dd scrld
	!wo beftext-1	; 111 $b229 text
	!wo befcset-1	; 112 $b30d cset
	!wo befvol-1	; 113 $b33a vol
	!wo befdisk-1	; 114 $b358 disk
	!wo befhrdcpy-1	; 115 $b4b8 hrdcpy
	!wo befkey-1	; 116 $b583 key
	!wo befpaint-1	; 117 $b5ec paint
	!wo beflowcol-1	; 118 $93dc low col
	!wo befcopy-1	; 119 $b9f1 copy
	!wo befmerge-1	; 120 $8344 merge
vecrenum	!wo befrenum-1	; 121 $837f renumber (changed from 87b4)
	!wo befmem-1	; 122 $bdad mem
	!wo befdetect-1	; 123 $bdf7 detect
	!wo befcheck-1	; 124 $a278 check    (fn check)
	!wo befdisplay-1	; 125 $be13 display
	!wo beferror-1	; 126 $bfbb error    (fn err)
	!wo befout-1	; 127 $9ed1 out

; ----------------------------------------- 
; 87c0 
tsbf1	!tx "proc not founD"	; 33 / $21
tsbf2	!tx "insert too largE"	; 34 / $22
tsbf3	!tx "string too largE"	; 35 / $23
tsbf4	!tx "not binary chaR"	; 36 / $24
tsbf5	!tx "not hex chaR"		; 37 / $25
tsbf6	!tx "end proc without exeC"	; 38 / $26
tsbf7	!tx "end loop without "	; 39 / $27
tsbf8	!tx "looP"		; 40 / $28
tsbf9	!tx "until without repeaT"	; 41 / $29
tsbfa	!tx "stack overfloW"	; 42 / $2a
tsbfb	!tx "too few lineS"		; 43 / $2b
tsbfc	!tx "bad char for a moB"	; 44 / $2c
;	    "array not found	; 45 / $2d (pt 7)
tsbf0	!tx "bad modE"		; 32 / $20
	!by 0
; ----------------------------------------- 
; 887d
serrout	txa
	bpl +
	jmp $a474		; sys out: ready.

+	jsr kerromein
	txa
	and #$20
	bne +
	jmp $a43a		; sys out: error

+	txa
	and #$1f
	asl
	tax
	lda fehlmtab,x
	sta $22
	lda fehlmtab+1,x
	sta $23
	jmp $a447		; sys out: (tsb) error

; ----------------------------------------- Table Error Addresses
; 88a0
fehlmtab	!wo tsbf0,tsbf1,tsbf2,tsbf3,tsbf4,tsbf5,tsbf6,tsbf7
	!wo tsbf8,tsbf9,tsbfa,tsbfb,tsbfc,tsbfd

; ----------------------------------------- 
; 88bc
;
; End of part 1
;



