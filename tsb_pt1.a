; ----------------------------------------- 
;
; Tuned Simons' Basic
;
; by Arndt Dettke, 1986
;
; part 1
;
; patched on 13.01.2021
; patched on 25.01.2021 (tables)
; patched on 13.03.2021 (command COLD, Reset, Stop/Restore)
; patched on 21.04.2021 (command RENUMBER)
; patched on 25.08.2021 (make OPEN independent from drive number)
; patched on 05.10.2021 (added DIV as a command to Clear Screen)
; patched on 05.10.2021 (new tokenizer, new detokenizer)
; patched on 17.09.2022 (de/tokenizer: added CLS token and keyword)
;
; ----------------------------------------- 

	!ct pet

; ----------------------------------------- 

startvec	!wo sstart
smnivec	!wo sbnmi

; ----------------------------------------- 

modultext	!tx "CBM80"

; ----------------------------------------- 
; 8009
sstart	jmp befcold

; ----------------------------------------- Calls to BASIC ROM
; 800c
sfrmnum	jsr pspeibe
	jsr $ad8a		; get numerical expression
	jmp prestor
; 8015
sfacadr	jsr pspeibe
	jsr $b7f7		; FAC to word (.y=lo, .a=hi, :INT)
	jmp prestor
; 801e
ssin	jsr pspeibe
	jsr $e26b		; func SIN
	jmp prestor
; 8027
scos	jsr pspeibe
	jsr $e264		; func COS
	jmp prestor
; 8030
schkcom	jsr pspeibe
	jsr $aefd		; check for comma
	jmp prestor
; 8039
sfrmevl	jsr pspeibe
	jsr $ad9e		; retrieve expression
	jmp prestor
; 8042
sfrestr	jsr pspeibe
	jsr $b6a3		; retrieve string parameters
	jmp prestor
; 804b
noround	jsr usel3		; restore format string
	lda #$25
	sta toul3+1
	rts		; and out, finish
; 8054
sgoto1	jsr pspeibe
	jsr $a8a3		; bef GOTO (to line in INT)
	jmp prestor
; 805d
schkzei	jsr pspeibe
	jsr $aeff		; check if char in .a is at pz
	jmp prestor
; 8066
sxflppl	jsr pspeibe
	jsr $bc44		; integer to float (hi: $62, lo: $63, .x:#$90)
	jmp prestor
; 806f
sstrpz	jsr pspeibe
	jsr $a613		; compute address of line start (number in INT)
	jmp prestor
; 8078
sascflp	jmp $bcf3		; digits from basic to float
; 807b
sgetari1	jmp $ae92		; get arithmetical expression from basic
; 807e
schkklz	jsr pspeibe
	jsr $aef7		; check for "Klammer zu"
	jmp prestor
; 8087
sxflp	jsr pspeibe
	jsr $bc49		; convert to FAC (.x=exponent)
	jmp prestor
; 8090
sfacarg	jsr pspeibe
	jsr $bc0c		; FAC to ARG
	jmp prestor
; 8099
sfmult	jsr pspeibe
	jsr $ba30		; FAC*ARG
	jmp prestor
; 80a2
sfldfack	jsr pspeibe
	jsr $bba2		; const (.a=lo, .y=hi) to FAC
	jmp prestor
; 80ab
sfdiv	jsr pspeibe
	jsr $bb14		; ARG/FAC
	jmp prestor
; 80b4
sfacasc	jsr pspeibe
	jsr $bddd		; FAC to ASCII (in $0100)
	jmp prestor
; 80bd
sgetvar	jsr pspeibe
	jsr $b08b		; get var from basic
	jmp prestor
; 80c6
stestdirm	jsr pspeibe
	jsr $b3a6		; check for direct mode (error if yes)
	jmp prestor
; 80cf
sclrch	jsr pspeibe
	jsr $abb5		; clear open device channels
	jmp prestor
; 80d8
srem	jsr pspeibe
	jsr $a8f8		; find colon and add to progz
	jmp prestor
; 80e1
snexttr	jsr pspeibe
	jsr $a906		; find colon, offset in .y
	jmp prestor
; 80ea
sinput1	jsr pspeibe
	jsr $ac0d		; bef INPUT
	jmp prestor
; 80f3
spuf0cr	jsr pspeibe
	jsr $aaca		; write buffer $0200 and cr
	jmp prestor
; 80fc
sbzply	jsr pspeibe
	jsr $a8fb		; progz plus .y
	jmp prestor
; 8105
sgetbyt1	jsr pspeibe
	jsr $b79e		; getbyt from basic (to .x)
	jmp prestor
; 810e
sbind	jsr pspeibe
	jsr $a533		; bind basic lines
	jmp prestor
; 8117
ssmni	lda pport
	sta pspeinmi
	jsr kerromein
	jmp $fe43		; sys NMI
; 8122
sopen	jsr pspeibe
	jsr newopen	; bef OPEN (with TSB drive)
	jmp prestor

; ----------------------------------------- 
; 812b
pspeibe	pha		; save .a
	lda pport
	sta portspei	; save $01
	jsr basromei
	pla		; restore .a
	rts
; 8136
prestor	pha		; save .a
	lda portspei	; restore $01
	sta pport
	pla		; restore .a
	rts

; ----------------------------------------- Out Control
; 813e
chkscolon	jsr basromei	; uses ROM routines:
	jsr $aa9d		; check if more (part of PRINT)
	jmp basromau

; ----------------------------------------- Bef COLD (TSB)
; 8147			recoded
befcold	jsr basromei
	ldx #$00
	stx ramstart
	stx doindex
	ldy #$80
	jsr $fd8c		; sys set memory top
	jsr $e453		; sys load basic vectors ($0300..$030b)
	jsr $e3bf		; sys init ram
	sei
	jsr $fda3		; sys init cias
	jsr colsout	; sys init VIC and keyboard, set TSB colors
	lda #0
	tax
-	sta faststack,x
	sta settings1,x
	sta $d400,x	; init SID
	inx
	bne -
into	jsr cold1		; set drive 8 and LOAD/SAVE vectors
	ldx #11
-	lda tsbvecs,x
	sta basvecs,x
	dex
	bpl -
	ldx #$81		; (hard) nmi vector hi ($8117)
	stx $fffa+1	; (in case kernal is off at reset)
	inx
	stx nmivec+1	; NMI = $82f9
	inx
	stx brkvec+1
	lda #<sbrk	; SBRK = $8313
	sta brkvec
	lda #$17		; sys nmi vector lo ($8117)
	sta $fffa		; (in case kernal is off at reset)
	lda #<snmi
	sta nmivec
	cli
	lda $2b		; get start of basic program
	ldy $2c
	jsr $a408		; sys free memory
	jsr $e422		; sys out start message of sb
	ldx #$fb
	txs
	jmp dscbmout	; set colors, show "tuned"

; ----------------------------------------- 
; 81ae
tsbvecs	!wo warmstart,sloop,zeiumw,slist,sbasbef,sgetari

; ----------------------------------------- 
; 81ba
tsbpudef	!by $2b,$2a,$2c,$2e,$2d,$23	; +*,.-#

; ----------------------------------------- bef DIV/CLS (Clear Video)
; 81c0
befdiv	jsr clear		; clear screen
	jmp bef0

; ----------------------------------------- part of USE
; 81c6
useready	pla
	pla
	lda #$00
	jsr genout
	jsr basromei
	lda #$a7		; address of outstring ($02a7)
	ldy #$02
nocrlfstr	jsr $ab1e		; sys string out
nocrlf	jsr chrgot	; semicolon?
	bne +
	jmp $aad7		; no, sys cr/lf out

; ----------------------------------------- 
; 81df
+	lda #$3b		; ";"?
use6	ldy #0		; compare to running code char
	cmp (progz),y	; if not equal: error bad mode
	bne +
	jmp chrget	; otherwise: get next char

+	jmp swarm		; bad mode

; ----------------------------------------- 
; 81ed			recoded
use0	jsr sgetbytn	; USE #n
	stx $13		; .x= device #
	jsr $e4ad		; sys: basic ckout
	bcs use2		; on error: continue anyway
	jsr schkcom	; comma?
	bne use2		; uncond. branch

; ----------------------------------------- 
; 81fc
sgetbytc	jsr schkcom
	jmp sgetbyt1

; ----------------------------------------- 
; 8202
sgetbytn	jsr incbasbz
	jmp sgetbyt1

; ----------------------------------------- 
; 8208
	jsr incbasbz	; unused

; ----------------------------------------- bef USE
; 820b			recoded
befuse	jsr chrget	; next char: digit?
	bcc +		; yes, branch

	cmp #$23		; "#"?
	beq use0		; yes, open file (81ec)

use2	jmp use1		; no, continue normal use (9ce3)

+	jmp usedrv	; change drive#

; ----------------------------------------- part of TRACE
; 821a
trace6	dex		; token number: index in
	txa		; Liste der Schlüsselwörter
	ora #$80
	ldx #>tabbef
	stx $21
	ldx #<tabbef
	stx $20
	jmp trace7

; ----------------------------------------- 
; 8229
endsmb	jsr kerromein
	cli
	jsr basromei
	jmp $a7ae		; sys: Interpreter

; ----------------------------------------- 
; 8233
zeiumw	jsr basromau
	jsr tokenize
	jsr basromei
	jmp $a57c		; sys: tokenizer

; ----------------------------------------- 
; 823f
slist	php

	pha
	jsr basromau
	pla
	jsr slist3	; TSB-Optionen abarbeiten,
	php		; (TSB? regelt zeroflag)
	pha
	jsr basromei
	pla
	ldx helpvc2+1
	plp		; dann: ROM
	beq ma

	plp		; war TSB, nun:
	jmp $a6f6		; sys: romlista (Quote, nächste zeile)

ma	plp		; war nicht TSB, nun:
	jmp $a71a		; sys: romlistb (V2-Befehle ausgeben)

; ----------------------------------------- Eingabewarteschleife
; 825b			recoded
sloop	sei
	lda #>sirq	; change irq to tsb
	sta irqvec+1
	lda #<sirq
	sta irqvec
	sta playflag
	ldx #0
	stx $d01a
	stx onerrorflag
	stx onkeyflag
	stx basbzk+1
	stx doflag
	cli
	lda $d011
	and #$20
	beq +
	inx		; (.x not needed anymore)
	jsr basromau
	jsr nrm01		; do NRM
+	jsr basromei
	lda autoflag
	cmp #10
	beq auto
	jmp $a483		; sys Eingabewarteschleife

; ----------------------------------------- 
; 8296			enhanced
auto	clc
	lda autozi
	adc autoinc
	sta $63
	sta autozi
	lda autozi+1
	adc #0
	sta $62
	sta autozi+1
	jsr sxyflp2
	jsr $bddf		; sys fac2ascii
	ldx #0
-	lda linenum,x
	beq +
	sta keybuf,x
	inx
	bne -
+	lda #$20		; space
	sta keybuf,x
	inx
	stx numkeys
	lda #0
	sta autoflag
	jsr $a560		; sys Basiczeile einlesen
	sty $aa

	ldy #0
-	iny
	lda basinbuf,y
	beq +
	cmp #$3a		; ":"?
	bcc -
	cmp #$5b		; "["? (beyond "z"?)
	bcs -
	lda #10
+	sta autoflag

	ldy $aa
	jmp $a486		; sys Eingabewarteschleife (ohne inc)

; ----------------------------------------- 
; 82eb
basromau	lda pport
	and #$fe
	sta pport
	rts

; ----------------------------------------- 
; 82f2
basromei	lda pport
	ora #$01
	sta pport
	rts

; ----------------------------------------- 
; 82f9
snmi	pha
	txa
	pha
	tya
	pha
sbnmi	jsr kerromein
	lda #$7f
	sta $dd0d
	ldy $dd0d
	bmi rs232nmi
	jsr $f6bc		; sys STOP?
	jsr $ffe1		; sysvec really STOP?
	bne rs232nmi

; ----------------------------------------- 
; 8313
sbrk	lda #$04
	sta video		; video at $0400
	jsr $fda3		; set CIAs
	jsr $e518		; sys init screen
	jsr tsbcols	; set colors, returns .a=0
	sta $d4
	sta mobbew
	sta gmemflag
	lda #14		; CTRL n:
	sta playflag
	jsr bsout		; cset 1
	jmp ($a002)	; system nmi

rs232nmi	jmp $fe72		; nmi when rs323

; ----------------------------------------- bef MERGE (TSB)
; 8337			recoded
befmerge	jsr incbasbz
	jsr basromei
	lda #0		; force LOAD
	sta $0a
	jsr $e1d4		; sys get params for LOAD/SAVE
	lda $0a
	ldx $2d		; get start of variables as prg start
	ldy $2e
	jsr load
	bcs +
	jsr $ffb7		; sys read status
	and #$bf		; EOF?
	beq ++
	jmp $e19c		; sys yes, load error
+	jmp $e0f9		; sys no, break in...

; ----------------------------------------- 
; 835c
++	jsr basromau
	jsr domerge	; continue MERGE:
endmrge	jsr $a660		; sys clear
	jmp $a474		; sys out: ready.

; ----------------------------------------- 
; 8368
schkstr	jsr pspeibe
	jsr $ad8f		; sys check for string
	jmp prestor

; ----------------------------------------- bef RENUMBER
; 8371			recoded
befrenum	jsr get10010	; .a=0
	beq +

	jsr sgetadr	; get start line number
	sty $a4		; result in .y (lo) and .a (hi)
	sta $a5
	jsr isstep0	; get step, is it 0? Doesn't return if	yes
	sty ay		; in .y (lo) and in...
	jsr basromau
	lda $c4		; ...c4 (hi)

+	jsr isprg		; do renumber

	jsr renum1	; get start of basic (to a8/9)
-	lda ($a8),y	; store line link to 09/a
	sta $09
	jsr inca8a9
	lda ($a8),y
	sta $0a
	jsr inca8a9
	iny
	lda $a5		; in case: line num gt 63999?
	cmp #$fa
	bcs sbready	; yes, just leave
	sta ($a8),y	; no, now write new line nums to basic
	dey
	lda $a4
	sta ($a8),y
	lda $09		; until end of prg
	ora $0a
	beq sbready
	jsr ren0		; set link to nexr line
	lda $a4		; add step to last line num
	adc ay
	sta $a4		; store new line num
	lda $a5
	adc ay+1
	sta $a5
	bcc -		; cont. 

; 83c3
sbready	jsr $a659		; then: sys basic bef CLR
	jmp $a474		; sys out: ready. RENUMBER finished

; ----------------------------------------- 
; 83c9
tsbcols	ldx #12		; backgr: mgr
	stx $d021
	dex		; border: dgr
	stx $d020
	lda #0		; cursor: blk
	sta aktfarb
	rts

; ----------------------------------------- 
; 83d8
incbasbz	inc progz
	bne +
	inc progz+1
+	rts

; ----------------------------------------- Table of Commands
; 83df
tabbef	!tx "hireS"	; 1
	!tx "ploT"
	!tx "linE"
	!tx "blocK"
	!tx "fchR"
	!tx "fcoL"
	!tx "filL"
	!tx "reC"
	!tx "roT"		; 9
	!tx "draW"
	!tx "chaR"
	!tx "hi coL"
	!tx "inV"
	!tx "fraC"
	!tx "movE"
	!tx "placE"
	!tx "upB"		; 17
	!tx "upW"
	!tx "leftW"
	!tx "leftB"
	!tx "downB"
	!tx "downW"
	!tx "rightB"
	!tx "rightW"
	!tx "multI"	; 25
	!tx "colouR"
	!tx "mmoB"
	!tx "bflasH"
	!tx "mob seT"
	!tx "musiC"
	!tx "flasH"
	!tx "repeaT"
	!tx "plaY"	; 33
	!tx "dO"
	!tx "centrE"
	!tx "envelopE"
	!tx "cgotO"
	!tx "wavE"
	!tx "fetcH"
	!tx "at",$a8
	!tx "untiL"	; 41
	!by $be		; *
	!by $be		; +
	!tx "usE"
	!by $be		; -
	!tx "globaL"
	!by $be		; /
	!tx "reseT"
	!tx "proC"	; 49
	!tx "calL"
	!tx "exeC"
	!tx "end proC"
	!tx "exiT"
	!tx "end looP"
	!tx "on keY"
	!tx "disablE"
	!tx "resumE"	; 57
	!tx "looP"
	!tx "delaY"
	!tx "clS"		; <
	!tx ">"
	!by $be		; =
	!tx "maP"		; >
	!by $be		; ?
	!tx "securE"
	!tx "disapA"	; 65
	!tx "circlE"
	!tx "on erroR"
	!tx "no erroR"
	!tx "locaL"
	!tx "rcomP"
	!tx "elsE"
	!tx "retracE"
	!tx "tracE"	; 73
	!tx "diR"
	!tx "pagE"
	!tx "dumP"
	!tx "finD"
	!tx "optioN"
	!tx "autO"
	!tx "olD"
	!tx "joY"		; 81
	!tx "moD"
	!tx "diV"
	!tx "d",$a1
	!tx "duP"
	!tx "inkeY"
	!tx "insT"
	!tx "tesT"
	!tx "liN"		; 89
	!tx "exoR"
	!tx "inserT"
	!tx "poT"
	!tx "penX"
	!by $be		; ^
	!tx "penY"
	!tx "sounD"
	!tx "graphicS"	; 97
	!tx "desigN"
	!tx "rlocmoB"
	!tx "cmoB"
	!tx "bckgndS"
	!tx "pausE"
	!tx "nrM"
	!tx "moB"
	!tx "ofF"		; 105
	!tx "angL"
	!tx "arC"
	!tx "colD"
	!tx "scrsV"
	!tx "scrlD"
	!tx "texT"
	!tx "cseT"
	!tx "voL"		; 113
	!tx "disK"
	!tx "hrdcpY"
	!tx "keY"
	!tx "painT"
	!tx "low coL"
	!tx "copY"
	!tx "mergE"
	!tx "renumbeR"	; 121
	!tx "meM"
	!tx "detecT"
	!tx "checK"
	!tx "displaY"
	!tx "erR"
	!tx "ouT"
	!by 0

; ----------------------------------------- 
; 8619
klgetadr	jsr $aefa		; sys "("?
	jmp sgetadr2

; ----------------------------------------- 
; 8627
xipr3	sty doindex
	sty elseindex	; ### 2.20821
	sty sprepeat
	rts

; ----------------------------------------- Part of USE
; 8631
userr	bmi +		; ### 2.20915
	pla
	pla
	lda #$31		; write leading 1
	sta $02a6,y
	rts		; finish

+	pla
	pla
	lda #$f7		; value does not fit format
	sta toul3+1
	jmp noround
; 8645
longround	ldy $44
	lda linenum+2,x	; get digit right after last format char (#)
	cmp #$35		; lower than 5?
	bcc lr0		; yes, don't round
	lda $65
	beq lr0
	jsr roundup	; equal/higher, so round up
lr0	jmp usel6

; ----------------------------------------- bef SOUND
; 8650			new
befsound	jsr sgetbytn	; get voice number
	jsr chkvoice	; is in 1..4?
	jsr setsid	; set SID base address
	jsr schkcom	; comma?
	jsr sgetadr	; get frequency value
	ldy #1
	jsr optp1		; write to SID
	jmp endsmb

; ----------------------------------------- part of WAVE
; 8667			new
optpulse	jsr schkcom
	jsr sgetadr	; returns .a=hi, .y=lo from INT
	ldy #3		; index to pulse high
optp1	sta ($20),y
	dey
	lda int
	sta ($20),y
	rts

; ----------------------------------------- Part of RENUMBER
; 8677 
isprg	tax		; save .a
	ldy #0		; is there any PRG?
	lda ($2b),y
	iny
	ora ($2b),y
	bne +
	jmp scd5		; no, finished
+	txa		; restore .a
	jmp renum0	; yes, process it

; ----------------------------------------- Part of IF
; 868d 
toelstk	pha
	cpx #0
	beq +
	stx helpvec
	ldx elseindex
	sta stackelse,x
	inx
	stx elseindex
	ldx helpvec
+	pla
	sta ifflag
	rts

; ----------------------------------------- 
; 86a0
tuned	!tx $0e,$08," tuned", $0d	; tsb start message 
	!by 0

; ----------------------------------------- 
; 86aa
tsbblcopy	jsr pspeibe
	jsr $a3b8		; sys block copy
	jmp prestor

; ----------------------------------------- 
; 86b3 / 86b6
sgetstrn	jsr incbasbz
sgetstr	jsr sfrmevl	; get string from basic
	jsr sfrestr
	sta $69		; len
	lda $23		; location
	ldx $22
	rts

; ----------------------------------------- Table of BEFs
; 86c3
sprtab	!wo befhires-1	;   1 hires
	!wo befplot-1	;   2 plot
	!wo befline-1	;   3 line
	!wo befblock-1	;   4 block
	!wo movebef-1	;   5 fchr
	!wo movebef-1	;   6 fcol
	!wo movebef-1	;   7 fill
	!wo befrec-1	;   8 rec
	!wo befrot-1	;   9 rot
	!wo befdraw-1	;  10 draw
	!wo befchar-1	;  11 char
	!wo befhicol-1	;  12 hi col
	!wo movebef-1	;  13 inv
	!wo swarm-1	;     bad mode (fn frac)
	!wo movebef-1	;  15 move
vecplace	!wo befplace-1	;  16 place    (changed from 86e2)
	!wo movebef-1	;  17 upb
	!wo movebef-1	;  18 upw
	!wo movebef-1	;  19 leftw
	!wo movebef-1	;  20 leftb
	!wo movebef-1	;  21 downb
	!wo movebef-1	;  22 downw
	!wo movebef-1	;  23 rightb
	!wo movebef-1	;  24 rightw
	!wo befmulti-1	;  25 multi
	!wo befcolour-1	;  26 colour
	!wo befmmob-1	;  27 mmob
	!wo befbflash-1	;  28 bflash
	!wo befmobset-1	;  29 mob set
	!wo befmusic-1	;  30 music
	!wo befflash-1	;  31 flash
	!wo befrepeat-1	;  32 repeat
	!wo befplay-1	;  33 play
	!wo befdo-1	;  34 do, done, do null
	!wo befcentre-1	;  35 centre
	!wo befenvelope-1	;  36 envelope
	!wo befcgoto-1	;  37 cgoto
	!wo befwave-1	;  38 wave
	!wo beffetch-1	;  39 fetch
	!wo befat-1	;  40 at       (fn at)
	!wo befuntil-1	;  41 until
	!wo swarm-1	;     (*)
	!wo swarm-1	;     (+)
	!wo befuse-1	;  44 use
	!wo swarm-1	;     (-)
	!wo befglobal-1	;  46 global
	!wo swarm-1	;     (/)
	!wo befreset-1	;  48 reset
	!wo befproc-1	;  49 proc
	!wo befcall-1	;  50 call
	!wo befexec-1	;  51 exec
	!wo befendproc-1	;  52 end proc
	!wo befexit-1	;  53 exit
	!wo befendloop-1	;  54 end loop
	!wo befonkey-1	;  55 on key
	!wo befdisable-1	;  56 disable
	!wo befresume-1	;  57 resume
	!wo befloop-1	;  58 loop
	!wo befdelay-1	;  59 delay
	!wo befdiv-1	;  60 cls (<)
	!wo swarm-1	;     (=)
	!wo err2a-1	;  62 map (>)
	!wo swarm-1	;     (?)
	!wo befsecure-1	;  64 secure
	!wo bef0-1	;  65 disapa
	!wo befcircle-1	;  66 circle
	!wo befonerror-1	;  67 on error
	!wo befnoerr-1	;  68 no error
	!wo beflocal-1	;  69 local
	!wo befrcomp-1	;  70 rcomp
	!wo befelse-1	;  71 else
	!wo befretrace-1	;  72 retrace
	!wo beftrace-1	;  73 trace
	!wo befdir-1	;  74 dir
	!wo befpage-1	;  75 page
	!wo befdump-1	;  76 dump
	!wo beffind-1	;  77 find
	!wo befoption-1	;  78 option
	!wo befauto-1	;  79 auto
	!wo befold-1	;  80 old
	!wo swarm-1	;     bad mode (fn joy)
	!wo befmod-1	;  82 mod      (fn mod)
	!wo befdiv-1	;     div	     (fn div)
	!wo befdelete-1	;  84 d!
	!wo befdup-1	;  85 dup      (fn dup)
	!wo swarm-1	;     bad mode (fn inkey)
	!wo befinst-1	;  87 inst     (fn inst)
	!wo swarm-1	;     bad mode (fn test)
	!wo beflin-1	;  89 lin      (fn lin)
	!wo swarm-1	;     bad mode (fn exor)
	!wo befinsert-1	;  91 insert   (fn insert)
	!wo swarm-1	;     bad mode (fn pot)
	!wo swarm-1	;     bad mode (fn penx)
vecbmode	!wo swarm-1	;     (^)
	!wo swarm-1	;     bad mode (fn peny)
	!wo befsound-1	;  96 sound    (fn sound)
	!wo befgraphics-1	;  97 graphics (fn graphics)
	!wo befdesign-1	;  98 design
	!wo befrlocm-1	;  99 rlocmob
	!wo befcmob-1	; 100 cmob
	!wo befbckgnds-1	; 101 bckgnds
	!wo befpause-1	; 102 pause
	!wo befnrm-1	; 103 nrm      (fn nrm, 90df)
	!wo befmoboff-1	; 104 mob off
	!wo befoff-1	; 105 off
	!wo befangl-1	; 106 angl
	!wo befarc-1	; 107 arc
	!wo befcold-1	; 108 cold
	!wo befscrsv-1	; 109 scrsv
	!wo befscrld-1	; 110 scrld
	!wo beftext-1	; 111 text
	!wo befcset-1	; 112 cset
	!wo befvol-1	; 113 vol
	!wo befdisk-1	; 114 disk
	!wo befhrdcpy-1	; 115 hrdcpy
	!wo befkey-1	; 116 key
	!wo befpaint-1	; 117 paint
	!wo beflowcol-1	; 118 low col
	!wo befcopy-1	; 119 copy
	!wo befmerge-1	; 120 merge
vecrenum	!wo befrenum-1	; 121 renumber
	!wo befmem-1	; 122 mem
	!wo befdetect-1	; 123 detect
	!wo befcheck-1	; 124 check    (fn check)
	!wo befdisplay-1	; 125 display
	!wo beferror-1	; 126 error    (fn err)
	!wo befout-1	; 127 out

; ----------------------------------------- 
; 87c1 
tsbf1	!tx "proc not founD"	; 33 / $21
tsbf2	!tx "insert too largE"	; 34 / $22
tsbf3	!tx "string too largE"	; 35 / $23
tsbf4	!tx "not binary chaR"	; 36 / $24
tsbf5	!tx "not hex chaR"		; 37 / $25
tsbf6	!tx "end proc without exeC"	; 38 / $26
tsbf7	!tx "end loop without "	; 39 / $27
tsbf8	!tx "looP"		; 40 / $28
tsbf9	!tx "until without repeaT"	; 41 / $29
tsbfa	!tx "cmd not activE"	; 42 / $2a
tsbfb	!tx "too few lineS"		; 43 / $2b
tsbfc	!tx "bad char for a moB"	; 44 / $2c
;	    "array not found	; 45 / $2d (pt 7)
tsbf0	!tx "bad modE"		; 32 / $20

; ----------------------------------------- 
; 887d
serrout	txa
	bpl +
	jmp $a474		; sys out: ready.

+	jsr kerromein
	txa
	and #$20
	bne +
	jmp $a43a		; sys out: error

+	txa
	and #$1f
	asl
	tax
	lda fehlmtab,x
	sta $22
	lda fehlmtab+1,x
	sta $23
	jmp $a447		; sys out: (tsb) error

; ----------------------------------------- Table of Error Addresses
; 88a0
fehlmtab	!wo tsbf0,tsbf1,tsbf2,tsbf3,tsbf4,tsbf5,tsbf6,tsbf7
	!wo tsbf8,tsbf9,tsbfa,tsbfb,tsbfc,tsbfd

; ----------------------------------------- 
; 88bc
;
; End of part 1
;



