; ----------------------------------------- 
;
; Tuned Simons' Basic
;
; by Arndt Dettke, 1986
;
; part 3
;
; patched on 13.01.2021
;   (commands BFLASH, FLASH, DIR, OPTION, PAGE, PLAY & TRACE)
; patched on 25.01.2021
;   (interpreter, commands EXEC, CALL, EXIT & PROC)
; patched on 24.03.2021
;   (commands DIR, CALL, added FastCall)
; patched on 12.04.2021 (commands AUTO & RENUMBER)
; patched on 06.05.2021
;   (added new command DRAW TO, changed PLOT)
; patched on 22.05.2021
;   (commands HIRES, PLOT & MULTI, bugfix in EXEC)
; patched on 29.05.2021 (bugfix in DRAW TO)
; patched on 06.06.2021 (added startadr to LOAD: BLOAD)
; patched on 16.08.2021 (minor bugfix in RENUMBER)
; patched on 25.08.2021 (make OPEN independent from drive number)
; patched on 07.11.2021 (bugfix: now checks max values in PRINT AT() )
; patched on 29.11.2021 (added hold DIR output on keypress)
; patched on 07.12.2021 (BFLASH now starts immediately)
; patched on 20.02.2022 (added to SCRLD/SCRSV sa: 5, by P. Hagemann)
; patched on 13.03.2022 (bugfix in warmstart caused by ON ERROR/END)
; patched on 24.03.2022 (LOW COL par 3)
; patched on 05.04.2022 (command CENTRE: new option)
; patched on 21.05.2022 (new command KEYGET, enhanced on 28.05.22)
; patched on 10.07.2022 (optimized HIRES for new function MEMPEEK)
; patched on 17.07.2022 (bugfix in DO..DONE)
;
; ----------------------------------------- 

	!ct pet

; ----------------------------------------- TSB Commands
; 917c
bef0	jsr chrget
	jmp endsmb

; ----------------------------------------- TSB Interpreter
; 9182			recoded
sbasbef	tsx
	stx stack		; save stack pointer
	lda onkeyflag
	beq sintprt0
	jsr onkey1

sintprt0	jsr chrget	; get next char
	jsr stateofdo	; what about DO..DONE and ELSE?

	lda traceflag	; trace active?
	beq +

	ldx $3a		; yes, get basic line hi
	inx
	beq +
	jsr trace1

+	ldy #0
	sty autoflag	; auto off

	lda (progz),y	; current char:
	beq ipr0		; line end?

	cmp #$8b		; IF?
	bne ipr1
	jmp befif

ipr1	cmp #$64		; sb token?
	beq ipr5

	cmp #$8a		; RUN?
	beq ipr3
	cmp #$9c		; CLR?
	beq ipr3
	cmp #$a2		; NEW?
	beq ipr3

	lda (progz),y	; reget char:
	bmi ipr4		; standard token?

	cmp #$3a		; no, ":"? (end of command)
	beq ipr0		; yes, continue with next 

	jsr $a906		; sys find next ":" (offset in .y)
	sty $22
	ldx #$b2		; sys find "=" (offset in .y)
	jsr $a90b
	cpy $22		; beyond ":"?
	bcs ipr2		; yes, so this is EXEC w/o EXEC

ipr4	jsr chrgot	; reget standard token
	jmp $a7e7		; and process

ipr0	jmp $a7ae		; sys interpreter

ipr2	sty execflag	; flag for EXEC w/o EXEC
	jmp befexec	; 9c2a

ipr3	jsr xipr3		; clear stacks
	sty spexec
	sty sploop
	sty prstack
	beq ipr4		; (uncond. branch)

ipr5	jsr incbasbz	; process sb command
	jsr basromau
	lda (progz),y
	asl
	tay
	dey
	dey
	lda sprtab+1,y
	pha
	lda sprtab,y
	pha
	rts

; ----------------------------------------- bef HIRES
; 9209			optimized
befhires	ldy #$01
	sty xmaxhigh
	lda #$3f
	sta xmaxlow
	dey
	sty $a6
	sty lowcolflag
	lda #$e0
	sta $a7
	jsr g2nsafe	; ca79, get2nyb (farben), even after MEM
	ldx $aa
	stx $ac

	lda #0		; clear bitmap
-	sta ($a6),y
	jsr inca6a7
	ldx $a6
	cpx #$40
	bne -
	ldx $a7
	cpx #$ff
	bne -

	tay
	sty multijn
	jsr nrm01
	jsr nrm03

; 9241
	sty lowcolflag
	lda $ac		; clear colors
setmod	jsr clrhicols
	beq ++

; ----------------------------------------- func MEMPEEK
; 924b
csgetarik	bne +		; MEMPEEK?

fnmempeek	jsr getpeek	; yes, PEEK in overall RAM
	sei
	lda pport
	pha
	lda #$30		; 9b57: $31 for charset
	sta pport
	lda (int),y
	tay
	pla
	sta pport
	cli
	jsr restint
	jmp sxyflp3

; ----------------------------------------- 
; 925f
+	jmp csgetariend	

; ----------------------------------------- bef PLOT
; 9262			recoded
befplot	jsr getxy
	jsr getpktf	; col
	jsr punkt		; set dot
++	jmp endsmb

; ----------------------------------------- 
; 926e
clrhicols	sta $c000,y	; clear video ram
	sta $c0f9,y
	sta $c1f3,y
	sta $c2ed,y
	iny
	cpy #$fb
	bne clrhicols
	rts

; ----------------------------------------- part of DO
; 9280
dodone	bcs +		; DONE?
	jmp befproc	; no, skip rest of line

+	jmp donecont	; b56a

; -----------------------------------------  set dot
; 9288
-	lda #$08		; nicht plausibel
	sta status
	rts

; -----------------------------------------
; 928d			original
punkt	clc
	lda $09		; plausibel?
	sbc xmaxlow	; x>319?
	lda $0a
	sbc xmaxhigh
	bcs -		; ja, Fehler
	lda $a4		; y>199?
	cmp #200
	bcs -		; ja, Fehler

	lda multijn	; multi?
	beq +
	asl $09		; yes, double x
	rol $0a
+	lda $09
	and #$07
	tax		; .x used in setdots (below)
	lda $a4		; y AND 7 (rasterline in tile)
	and #$07
	sta $63
	lda $09		; x AND 248
	and #$f8
	sta $09

	lda $f7		; current color
	cmp #$0b		; 11=test (if yes, skip colorize)
	beq +
	lda lowcolflag	; LOW COL active? (no, then skip)
	beq +
	lda gflag		; BLOCK active? (yes, then skip)
	bne +

	lda $a4		; save y-pos
	pha
	lda $09		; save x-pos
	pha
	lda $0a
	pha
	jsr farbset	; colorize
	pla
	sta $0a		; restore x-pos
	pla
	sta $09
	pla
	sta $a4		; restore y-pos

+	lda $a4		; compute address
	lsr
	lsr
	lsr
	pha
	and #3
	tay		; y-pos/8
	clc
	lda gadrtabl,y
	adc $63
	adc $09
	sta $a8
	pla
	tay
	lda gadrtabh,y
	adc $0a
	sta $a9
	ldy #0
	sty status
	jsr kerromaus	; kernal off
	lda gflag		; BLOCK active?
	beq +		; no, set dots
	rts		; yes, leave

; ----------------------------------------- set dots
; 9308
+	lda multijn	; now set dots, hires?
	beq sethires
	jmp setmulti	; no, go to multi (9a7a)

; ----------------------------------------- set hires dots
; 9310
sethires	lda $f7		; hires, get color source
	beq herase
	cmp #1
	beq hset
	cmp #2
	beq hinvert
	jmp ptest1	; a261	

; 931f
hset0	inx		; inx: for multi double pixels
hset	lda ($a8),y
	ora gbittabs,x
	sta ($a8),y
	rts

; 9328
herase0	inx
herase	lda ($a8),y
	and gbittabl,x
	sta ($a8),y
	rts

; 932e
hinvert0	inx
hinvert	lda ($a8),y
	eor gbittabs,x
	sta ($a8),y
	rts

; ----------------------------------------- 
; 933a
gbittabs	!by $80,$40,$20,$10,$08,$04,$02,$01
gbittabl	!by $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe

; ----------------------------------------- bef LINE
; 934a			original
befline	jsr getxyxyf
line0	jsr linzei
	jmp endsmb

; ----------------------------------------- 
; 9353
getxy	jsr sgetadrn	; X
getxy2	sty $09
	sta $0a
	sty ax
	sta ax+1
	jsr sgetbytc	; Y
	stx $a4
	stx ay
	rts

; ----------------------------------------- 
; 9379
getxyxyf	jsr getxy		; start X/Y
getxyf	jsr schkcom	; comma?
gxyf0	jsr sgetadr	; end x
	sta ex+1
	sty ex
gyf0	jsr sgetbytc	; end y
	stx ey
getpktf	jsr sgetbytc	; draw mode
	stx $f7
	rts

; ----------------------------------------- 
; 9384			optimized
farbset	jsr kerromein
	lda $09		; x-pos/8 ( -> Kacheloffset in Zeile )
	lsr
	ror $0a
	ror $09
	lda $09
	lsr
	ror $0a
	ror $09
	lda $09
	lsr
	ror $0a
	ror $09
	lsr $a4		; y-pos/8...
	lsr $a4
	lsr $a4
	jsr a4mal40	; mal 40 (Start der Kachelzeile)

	clc		; Start plus Offset = Kacheladresse
	lda $a4
	adc $09
	sta $a8
	lda $a5
	adc $0a
	sta $a9
	sta $ab
; 93b4
	clc		; Low Col: Farben 1 und 2
	lda $a9
	adc #$c0		; in $c000
	sta $a9
	ldy #0
	lda lcfarb12
	sta ($a8),y

	lda lcfarb3	; Low Col: Farbe 3
	bmi +		; (>127? dann nichts tun)
	pha
	clc
	lda $ab
	adc #$d8		; in $d800
	sta $a9
	pla
	sta ($a8),y
+	rts

; ----------------------------------------- bef LOW COL
; 93d3			optimized
beflowcol	jsr get2nyb
	sta lcfarb12
	lda #10
	sta lowcolflag
	jsr sgetbytc
	stx lcfarb3
	jmp endsmb

; ----------------------------------------- bef KEYGET
; 93e7	KEYGET by P. Hagemann, v2.20521
keyget	jsr chrget	; nächstes Zeichen holen
	cmp #$a1		; GET-Token?
	beq get
	ldx #10		; no, continue KEY
	jsr chkonoff+5
	jmp befkey+3
;93f6
get	ldx #0		; ### v2.20528
	stx numkeys
-	ldx numkeys	; yes, Taste gedrückt?
	beq -
	jsr chrget
	jsr pspeibe
	jsr $ab7b   	; dann sys GET
	jsr prestor
	jmp scd5		; Stack bereinigen, Ende	

; ----------------------------------------- 
; 940d
kerromaus	sei
	lda pport
	and #$fd
	sta pport
	rts

; ----------------------------------------- 
; 9415
kerromein	lda pport
	ora #2
	sta pport
	rts

; ----------------------------------------- 
; 941c
sgetadr2	lda portspei
	pha
	jsr sgetadr
	sta zwspei1
	pla
	sta portspei
	lda zwspei1
	rts

; ----------------------------------------- 
; 942e
sgetadr	jsr sfrmnum
	jmp sfacadr

; ----------------------------------------- 
; 9434
gadrtabl	!by $00,$40,$80,$c0

; 9438
gadrtabh	!by $e0,$e1,$e2,$e3,$e5,$e6,$e7,$e8
	!by $ea,$eb,$ec,$ed,$ef,$f0,$f1,$f2
	!by $f4,$f5,$f6,$f7,$f9,$fa,$fb,$fc
	!by $fe

; ----------------------------------------- 
; 9451
intback	jsr restint
	jmp $aef7		; sys ")"?

; ----------------------------------------- 
; 945d
getint	ldx int
	lda int+1
	stx helpvc2
	sta helpvc2+1
	jmp $aefa		; sys: "("?, returns .y=0

; ----------------------------------------- 
; 9468			optimized
a4mal40	lda #0
	asl $a4		; $a4 mal 8...
	rol
	asl $a4
	rol
	asl $a4
	rol

	sta $a5		; ...merken...
	pha
	lda $a4
	pha

	asl $a4		; ...mal 32...
	rol $a5
	asl $a4
	rol $a5

	clc		; ...plus 8
	pla
	adc $a4
	sta $a4		; Ergebnis in $a4/5
	pla
	adc $a5
	sta $a5
	rts

; ----------------------------------------- bef CIRCLE
; 948d			enhanced
befcircle	jsr incbasbz
	lda #0
	sta drehsinn
	sta ueberdreh
	sta $a8		; startwinkel 0° 
	sta $a9
	sta winksw+1	; schrittweite (hi) 0
	jsr sgetadr
	sty kmx		; mittelpunkt
	sta kmx+1
	jsr sgetbytc
	stx kmy
	lda #$68		; endwinkel 360°
	sta $ac
	lda #$01
	sta $ad
	lda #12		; schrittweite (lo) 12
	sta winksw
	jsr getrxryf
	jmp endsmb

; ----------------------------------------- part of RENUMBER
; 94c1
ren3	jsr basromei
	jsr enternum	; count all lines
	cmp #$fa		; exceeded limit? (63999)
	bcs +		; yes, bad mode
	jmp ren4		; basic start to a8/9, then renumber in	line

+	jmp towarm	; bad mode error

; ----------------------------------------- 
; 94d1
l20pl40	clc
	lda $20
	adc #40
	sta $20
	bcc +
	inc $21
+	rts

; ----------------------------------------- 
; 94dd			optimized
l23pl40	clc
	lda $23
	adc #40
	sta $23
	bcc +
	inc $24
+	rts

; ----------------------------------------- bef MULTI
; 94e9			recoded
befmulti	lda #$2c		; set multi limits
	sta multijn
	lda #$9f
	sta xmaxlow
	lda #$00
	sta xmaxhigh

	jsr chkonoff	; check for ON/OFF
	jsr chrgot	; anything following?
	beq justmulti

	jsr get2nyb2	; yes, get 2 parameters, returns .y=0
	jsr clrhicols	; set video ram

	jsr sgetbytc	; get 3rd parameter
	txa
	ldy #0
-	sta $d800,y	; set color ram
	sta $d8f9,y
	sta $d9f3,y
	sta $daed,y
	iny
	cpy #$fb
	bne -
	ldx #$ff

justmulti	txa
	beq +
	lda #$18		; multi on
	!by $2c

+	lda #$08		; multi off
	sta $d016
	jmp endsmb

; ----------------------------------------- bef COLOUR
; 952d			recoded
befcolour	jsr docolor
	jmp endsmb

; ----------------------------------------- part of USE
; 9533
usedrv	jsr sgetbyt1	; get drive# (constant[+expression])
	stx drive		; and set
	jmp endsmb

; ----------------------------------------- 
; 953b
ren0	lda $09
	sta $a8
	lda $0a
	sta $a9
	rts		; 9

; ----------------------------------------- bef DIR
; 9544			enhanced
befdir	jsr sclose	; first: close file
	jsr chrget	; get next byte
	jsr fromdir	; check if anything follows ($a2ce)
	stx $ae
	sta $af
	ldy #0
	lda ($ae),y
dollars	cmp #$24		; "$"?
	beq dir0
	jmp swarm		; error "Bad Mode"?

dir0	ldy $af
	lda drive
	sta $ba
	jsr basromau
	lda $69
	jsr fileopen	; aa5a open file
	jsr basromei

	ldx #5
dir1	jsr $ffcf		; skip 5 chars
	dex
	bne dir1

	sta $63		; len lo
	jsr $ffcf
	sta $62		; and hi
	jsr $bdd1		; sys out integer
	lda #2
	sta helpvec
dir2	jsr chk4key	; STOP? Any other key?
	beq dir5		; if STOP: leave
dir3	jsr $ffcf		; get char
	ldx status	; fail?
	bne dir5
dir4	jsr bsout		; write char
	tay
	cmp #$22		; quotes?
	beq dir6
	tya		; no, cont
	bne dir2		; end of line?
	lda helpvec
	bne dir5
	jsr $aad7		; yes, sys out cr/lf
	ldx #3		; then skip 3 chars
	bne dir1

dir6	dec helpvec
	bne dir2
	lda #$3a		; out ":" after 2nd quote
	bne dir4

dir5	jsr sclose
	cli
	jmp endsmb

; ----------------------------------------- 
; 95b4
getkey	jsr $ffe4		; get char
	beq +
; 95b9
-	jsr $ffe4		; warten
	beq -
+	rts

; ----------------------------------------- 
; 95bf
dec7a	lda $7a
	bne +
	dec $7b
+	dec $7a
	rts

; ----------------------------------------- bef MMOB
; 95c8			modified
befmmob	jsr getx8n
	stx mobnr2
	stx mobnr
	asl mobnr2
	jsr schkcom
	jsr dec7a
	jsr getxyxyf
; 95dd
mobcont	ldx mobnr
	lda $f7
	bne mmb0
	jsr mobexl
	jsr mobeyl
	jmp mmb1

mmb0	cmp #1
	bne mmb2
	jsr mobexs
	jsr mobeyl
	jmp mmb1

mmb2	cmp #2
	bne mmb3
	jsr mobexl
	jsr mobeys
	jmp mmb1

mmb3	jsr mobexs
	jsr mobeys

mmb1	jsr sgetbytc
	stx mobspeed
	lda #$f0
	sta mobbew
	jsr mobbeweg
	sta mobbew
	beq mmb4		; uncond. branch

; ----------------------------------------- part of USE
; 9620
use1	jsr basromau
	jsr use3		; analyse USE parameters (b3e2)
	jsr sclrch
mmb4	jmp endsmb

; ----------------------------------------- 
; 962c
mobposs	lda $09
	ldx #0
mmb6	cpx mobspeed
	beq mmb5
	inx
	ldy #0
mmb7	cpy #10
	beq mmb6
	iny
	bne mmb7
mmb5	ldy mobnr2
	sta $d000,y
	lda $0a
	cmp #1
	bne mmb8

	ldy mobnr
	lda $d010
	ora mbittabs,y
mmb9	sta $d010
	lda $a4
	ldy mobnr2
	sta $d001,y
	rts

mmb8	ldy mobnr
	lda $d010
	and mbittabl,y
	jmp mmb9

; ----------------------------------------- bef BFLASH
; 966c			recoded
befbflash	jsr chkonoff	; get first parameter
	txa		; OFF?
	beq ++		; yes, switch flag off
	jsr chrgot	; ON?
	beq +		; yes, switch flag on

	stx bflashsp	; no, set speed
	dex
	stx bflzae	; start flash immediately
	jsr sgetbytc
	stx bflashf1	; set color 1
	jsr sgetbytc
	stx bflashf2	; set color 2

+	lda $d020		; save current border color
	sta bflashing
	ldx #10		; switch flag on
	bne +

++	lda bflashing	; restore border color
	sta $d020

+	stx bflashjn
	jmp endsmb

; ----------------------------------------- 
; 96a0			enhanced
sirq	ldy #0
	inc zaeirq
	lda zaeirq
	cmp #60		; count 60 passes (seconds)
	bne +
	inc zaesec
	sty zaeirq

+	lda bflashjn
	cmp #10		; bflash active?
	bne sq0		; no, skip

	inc bflzae	; counter at max?
	lda bflzae
	cmp bflashsp
	bne sq0		; no, skip

	sty bflzae	; reset counter
	lda $d020		; toggle colors
	and #$0f
	cmp bflashf1
	beq +
	lda bflashf1
	jmp sq1

+	lda bflashf2
sq1	sta $d020
sq0	jmp sirq2

; ----------------------------------------- bef MOB SET
; 96e0			enhanced
befmobset	jsr getx8n
	stx $aa
	lda $d015
	ora mbittabs,x	; switch mob on
	sta $d015

	jsr sgetbytc
	ldy $aa
	lda video		; where is video?
	cmp #$cc		; at $cc00 (after mem)?
	beq ifmem
	lda gmemflag
	cmp #10
	bne ifnrm
ifhires	txa
	sta $c3f8,y	; move mobs accordingly
	jmp msk0
ifmem	txa
	sta $cff8,y	; move mobs accordingly
	jmp msk0
ifnrm	txa
	sta $07f8,y	; move mobs accordingly

msk0	jsr sgetbytc
	ldy $aa
	txa
	sta $d027,y	; set mob color

	jsr sgetbytc
	cpx #1
	bne +

	lda $d01b		; set priority
	ldx $aa
	ora mbittabs,x
	sta $d01b
	jmp ++

+	lda $d01b
	ldx $aa
	and mbittabl,x
	sta $d01b

++	jsr sgetbytc
	cpx #1
	bne +

	lda $d01c		; set mob type (multi/hires)
	ldx $aa
	ora mbittabs,x
	sta $d01c
	jmp endsmb

+	ldx $aa
	lda $d01c
	and mbittabl,x
	sta $d01c
	jmp endsmb

; ----------------------------------------- bef MUSIC
; 975f			original
befmusic	jsr sgetbytn
	stx musicdau
	jsr schkcom
	jsr sgetstr
	stx musicadr
	sta musicadr+1
	ldy #0
	sty musicz1
	lda $69
	sta musiclen
bms0	jmp endsmb

; ----------------------------------------- 
; 977e
mbittabs	!by $01,$02,$04,$08,$10,$20,$40,$80
; 9786
mbittabl	!by $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f

; ----------------------------------------- bef FLASH
; 978e			recoded
befflash	jsr flashinit	; color (or ON/OFF) in .x
	jsr chrgot	; end of statement?
	bne +		; no, cont
	txa
	bne +		; OFF?
	jmp endflash	; yes, clear 

+	tay		
	cpx #16		; Farbe über 15?
	bcs +		; ja, übergehen
	jsr flashactv	; Farbe u. Default-Speed setzen

+	cpy #$2c		; folgt Speed?
	bne ++
	jsr sgetbytn	; ja, holen
	stx flashsp

++	lda #10		; FLASH aktivieren
	sta flashfl
	bne bms0

; ----------------------------------------- func AT
; 97b5			enhanced
fnat	jsr sgetbyt1
	cpx #40		; check limits (40/25)
	bcs +
	txa
	pha
	jsr sgetbytc
	clc
	pla
	cpx #25
	bcs +
	tay
	jsr $fff0		; sys plot
	jsr schkklz	; ")"?

	jsr dec7a
	jmp sgetari	; cont (8c8d)
+	jmp swarm

; ----------------------------------------- 
; 97d7			recoded
sirq2	lda $ff		; save $fc to $ff
	pha
	lda $fe
	pha
	lda $fd
	pha
	lda $fc
	pha
; 97e3
	lda flashfl	; is flash active?
	cmp #10
	bne sirq3 	; no, skip

	inc flashzae	; is counter at speed?
	lda flashzae
	cmp flashsp
	bne sirq3 	; no, skip
; 97f5
	lda flashing	; set sync byte
	eor #$80
	sta flashing
	lda #$d8		; yes, set color ram at $fe/$ff
	sta $ff
	lda video		; set video ram at $fc/$fd
	sta $fd
	sty $fe		; .y=0
	sty $fc
	sty flashzae
; 980d
-	lda ($fe),y	; get color
	and #$0f
	tax
	lda flashfls,x	; is color tagged?
	beq +
	lda ($fc),y	; yes, invert char in video ram
	eor #$80
	sta ($fc),y
+	inc $fe
	bne +
	inc $ff
+	inc $fc
	bne +
	inc $fd
+	lda $ff		; up to $e8db in color ram
	cmp #$db
	bne -
	lda $fe
	cmp #$e8
	bne -

; ----------------------------------------- 
; 9835			recoded
sirq3	lda $d4
	bne sirq4

	ldy $028d		; Shift/C=?
	lda shwerttab,y
	sta inkey
	lda $cb
	cmp #4		; F1?
	beq wasf1
	cmp #5		; F3?
	beq wasf3
	cmp #6		; F5?
	beq wasf5
	cmp #3		; F7?
	beq wasf7
; 9857
	lda #0		; none of these
	sta inkey
	beq sirq4
; 985b
wasf7	inc inkey
	inc inkey
wasf5	inc inkey
	inc inkey
wasf3	inc inkey
	inc inkey
wasf1	inc inkey

; ----------------------------------------- 
; 9870			recoded
sirq4	lda $cc
	bne sirq5

	lda keyflag
	cmp #10
	beq sirq5
	lda $d4
	bne sirq5
; 987f
	lda $cb
	cmp lastkey
	beq ams5
	lda $d8
	bne ams5
	lda inkey
	beq ams5
; 988f
	lda inkey
	sta $fe
	cmp #17		; beyond 16?
	bcs ams5
	lda #0		; # mal 16
	sta $ff
	dec $fe
	asl $fe
	rol $ff
	asl $fe
	rol $ff
	asl $fe
	rol $ff
	asl $fe
	rol $ff
	clc
	lda $fe
	adc #<keytab	; plus $c64d
	sta $fe
	lda $ff
	adc #>keytab
	sta $ff
	ldy #0		; out inkey text
-	lda ($fe),y	; (zero terminated)
	beq ams4
	cpy #15		; (max length: 16)
	beq ams4
	sta $0277,y	; write to keybuf
	iny
	bne -
; 98cb
ams4	sty $c6
ams5	lda $cb
	sta lastkey

; ----------------------------------------- 
; 98d2			recoded
sirq5	lda playflag
	cmp #10
	bne +
	jsr sirqplay
; 98df
+	pla		; restore $fc to $ff
	sta $fc
	pla
	sta $fd
	pla
	sta $fe
	pla
	sta $ff
	jmp $ea31		; sys IRQ

; ----------------------------------------- bef PAGE
; 98eb			enhanced
befpage	jsr chkonoff
	txa		; OFF?
	beq +++		; yes, set flag
	cpx #10		; no, ON?
	bne +		; no, set flag and new value

	lda pagewert	; was ON, get last value
	bne ++
+	stx pagewert	; was 0: set as new one

++	ldx #10		; set flag
+++	stx pageflag
	jmp endsmb

; ----------------------------------------- bef PLAY
; 9905			recoded
befplay	jsr chkonoff
	txa		; OFF? (or PLAY 0?)
	beq +		; yes, end music

	lda #10		; set ON
	sta playflag
	lda #0		; init music counter
	sta musicz4
	cpx #2		; PLAY 2?
	beq ++		; yes
	cpx #10		; PLAY ON?
	beq ++		; yes

			; no, PLAY 1 (PRG waits)
-	lda playflag	; gets cleared in IRQ
	cmp #10		; wait until cleared
	beq -

+	jsr playend	; PLAY 0: clear
++
--	jmp endsmb	; PLAY 2 or PLAY ON (PRG continues)

; ----------------------------------------- Part of FLASH
; 992a
flashactv	lda #10
	sta flashsp	; Default-Speed: 10
	sta flashfls,x	; Farbe aktivieren
-	rts

; ----------------------------------------- from SOPEN
; 9933
newopen	jsr $e219		; sys get parameters
	lda drive		; set drive
	sta $ba
	jmp $e1c1		; continue original routine

; ----------------------------------------- 
; 993d
chk4key	jsr $ffe1		; STOP?
	beq -		; yes, leave
	jmp wanykey

; ----------------------------------------- bef CENTRE
; 9945			recoded
befcentre	jsr gcentpar
+	sec
	sbc helpvec+2
	bmi +
	lsr
	tax
	beq +
	
	lda #$1d		; sys out CRSR right
-	jsr bsout
	dex
	bne -

+	ldx helpvec
	lda helpvec+1
	stx $22
	sta $23
	lda helpvec+2
	sta $69

-	jsr basromei	; now sys out string
	lda $69
	jsr $ab24
	beq --

; ----------------------------------------- part of TRACE
; 996f
trace5	lda ($5f),y
	tax
	jmp trace6

; ----------------------------------------- 
; 9975
rtc1	jsr incbasbz
	bne -

; ----------------------------------------- 
; 997a
cold1	lda #8
	sta drive
	jmp cold2

; ----------------------------------------- bef ENVELOPE
; 9981			original
befenvelope
	jsr sgetbytn
	jsr x123
	stx $a6
	jsr get2nybc
	sta $a8
	jsr get2nybc
	asl $a6
	ldx $a6
	lda sidtab,x
	sta $20
	inx
	lda sidtab,x
	sta $21
	lsr $a6
	ldy #$06
	lda $aa
	sta ($20),y
	ldy $a6
	sta srtab,y
	ldy #5
	lda $a8
	sta ($20),y
	ldy $a6
	sta adtab,y
	jmp endsmb

; ----------------------------------------- 
; 99bb
flinend	jsr chrget
	cmp #0
	bne flinend
	rts

; ----------------------------------------- 
; 99c3
get2nybc	jsr iskomma
get2nyb	jsr sgetbytn
get2nyb2	jsr xnyb
	txa
	asl
	asl
	asl
	asl
	sta $aa
	jsr sgetbytn
	jsr xnyb
	txa
	ora $aa
	sta $aa
	rts

; ----------------------------------------- bef CGOTO
; 99df			original
befcgoto	jsr incbasbz
cgoto0	jsr sfrmnum
	jsr sfacadr
	jsr sgoto1
	jmp endsmb

; ----------------------------------------- bef WAVE
; 99ee			original
befwave	jsr sgetbytn
	jsr x123
	stx $aa
	jsr schkcom
	jsr bincon
	jmp bwv0

; ----------------------------------------- 
; 99ff
bincon	lda #0
	sta $a6
	sta $a8
-	ldy #0
	lda (progz),y
	cmp #$30		; "0"?
	beq ++
	cmp #$31		; "1"?
	beq +
	ldx #$24		; no, error "not binary char"
	jmp ($0300)

+	ldy $a6
	lda $a8
	ora gbittabs,y
	sta $a8
++	inc $a6
	jsr incbasbz
	lda $a6
	cmp #8
	bne -
	rts

; ----------------------------------------- 
; 9a2b
bwv0	asl $aa
	ldy $aa
	lda sidtab,y
	sta $20
	iny
	lda sidtab,y
	sta $21
	ldy #4
	lda $a8
	sta ($20),y
	lsr $aa
	ldy $aa
	sta wavetab,y
	jmp endsmb

; ----------------------------------------- 
; 9a4a
sidtab	!wo $d400,$d407,$d40e

; ----------------------------------------- part of COLD
; 9a50
dscbmout	ldy #0
-	lda tuned,y
	beq +
	jsr bsout
	iny
	bne -
+	jmp endsmb

; ----------------------------------------- 
; 9a60
x123	cpx #4
	bcs towarm
	cpx #0
	beq towarm
	dex
-	rts
; 9a6a
getx8n	jsr incbasbz
getx8	jsr sgetbyt1
isit8	cpx #8
	!by $2c
xnyb	cpx #16
	bcc -

towarm	pla
	pla
	jmp swarm		; error

; ----------------------------------------- set multi dots
; 9a7c
setmulti	lda $f7		; color src 0?
	bne +

	jsr herase	; 0: clear double pixel
	bne +++		; uncond. branch

+	cmp #1		; 1?
	bne +
	jsr herase	; clear left, set right pixel
	jmp ++

+	cmp #2		; 2?
	bne +
	jsr hset		; set left, clear right pixel
+++	jsr herase0
	inx
	rts

+	cmp #3		; 3?
	bne +
	jsr hset		; set double pixel
++	jsr hset0
	inx
	rts

+	cmp #4		; 4?
	bne testdot
	jsr hinvert	; invert double pixel
	jmp hinvert0	; (no inx?)
; 
testdot	lda ($a8),y	; no, is 11 (test)
	and gbittabs,x
	beq +
	lda #2
	sta $90		; result in status, bits 0 and 1
+	inx
tdot0	lda ($a8),y
	and gbittabs,x
	beq +
	lda $90
	ora #1
	sta $90
+	rts

; ----------------------------------------- bef DRAW TO
; 9acb
drawto	jsr get10010	; get byte after DRAW token
	cmp #$a4		; token of TO?
	bne +		; no, RTS
	pla		; yes, clear stack
	pla
	jsr incbasbz	; skip TO
	jsr gxyf0		; then get ex/ey-end and mode
	jmp line0		; and draw line

; ----------------------------------------- Part of LOAD
; 9add
bloadadr	jsr $aefd		; sys chkcom
	jsr sgetadr	; word holen
	sta $c4		; als startadresse
	sty $c3
	ora $c3
	rts

; ----------------------------------------- 
; 9aea
inca6a7	inc $a6
	bne +
	inc $a7
+	rts

; ----------------------------------------- 
; 9af1
inca8a9	inc $a8
	bne +
	inc $a9
+	rts

; ----------------------------------------- bef REPEAT
; 9af8			enhanced
befrepeat	ldy sprepeat
	cpy #20
	bcc +
err2a	ldx #$2a		; error "stack too large"
	!by $2c
err29	ldx #$29		; error "until w/o repeat"
	jmp ($0300)

+	lda $7a
	sta stackrepeat,y
	iny
	lda $7b
	sta stackrepeat,y
	iny
	sty sprepeat
	jmp bef0

; ----------------------------------------- bef UNTIL
; 9b19			original
befuntil	jsr incbasbz
	lda sprepeat
	cmp #2
	bcc err29
; 9b23
	jsr sfrmevl
	jsr chrgot
	lda $61
	beq +
	dec sprepeat
	dec sprepeat
	jmp endsmb

+	ldy sprepeat
	dey
	lda stackrepeat,y
	sta progz+1
	lda stackrepeat-1,y
	sta progz
	jmp bef0

; ----------------------------------------- bef RETRACE
; 9b47			new
befretrace
	lda #<version	; out "ad86"
	ldx #>version
	ldy #12
	jmp trc1		; out version 

; ----------------------------------------- 
; 9b50
sadr2int	jsr pspeibe
	jsr $a96b		; sys line# to int
	jmp prestor

; ----------------------------------------- bef TRACE
; 9b59			enhanced
beftrace	jsr chkonoff
	stx traceflag
	jmp endsmb

; ----------------------------------------- bef OPTION
; 9b62			enhanced
befoption	jsr chkonoff
	stx optflag
	jmp endsmb

; ----------------------------------------- bef IF
; 9b6b			recoded
befif	jsr incbasbz
	jsr sfrmevl
	jsr chrgot
	cmp #$89		; GOTO?
	beq +

	lda #$a7		; no, check for THEN (syntax error if not)
	jsr schkzei
; 9b7d
inif	jsr schdo		; then search for DO in same line
	cmp $22
	beq fnddo

+	jsr chkelse	; search for ELSE in same line
	tax		; result: 0=not found, $47=found (in justif)

	lda $61		; get boole
	sta ifflag
	bne iftrue

	txa		; false: ELSE in same line?
	bne fndelse	; yes

	jsr sbzply
	jmp endsmb

; ----------------------------------------- 
; 9b9a
iftrue	jsr doiftrue	; true: process THEN
	bcs +
	jmp cgoto0	; sb goto (when digits)

; ----------------------------------------- 

fnddo	jsr mkwahr	; found DO
	dey
	iny
fndelse	dey
	jsr sbzply

+	jsr dec7a
	jmp execbef	; basic on, execute command

; ----------------------------------------- 
; 9baf
schdo	lda #$22		; search for DO(ne)
	!by $2c
schelse	lda #$47		; search for ELSE
	sta $22
	ldy #$ff
-	iny		; get next byte
	lda (progz),y
	beq +		; found end of line?
	cmp #$64		; sb token?
	bne -		; no
	iny
	lda (progz),y	; found search token?
	cmp $22
	bne -
+	rts		; equal if yes

; ----------------------------------------- part of RENUMBER
; 9bc9
ren1	lda $2b		; get basic start
	ldx $2c
	sta $a8		; to $a8/9
	stx $a9
	jmp ren2		; b9df

; ----------------------------------------- bef AUTO
; 9bd4			enhanced
befauto	jsr get10010	; any parameters?
	beq aut1
	jsr sfrmnum	; yes, get start value...
	jsr sfacadr
	sta autozi+1
	sty autozi	; and step
	jsr sgetbytc
aut1	stx autoinc	; set step
	lda autozi	; initialize auto (.c=1)
	sbc autoinc	; (subtract step from start)
	sta autozi
	lda autozi+1
	sbc #0
	sta autozi+1
aut0	lda #10		; activate auto
	sta autoflag
	bne ++		; uncond. branch

; ----------------------------------------- bef RESET
; 9c03			original
befreset	jsr incbasbz
	jsr sfrmnum
	jsr sfacadr
	sta int+1
	sta $40		; sys line# DATA
	sty int
	sty $3f
	jsr sstrpz
	sec
	lda $5f
	sbc #1
	ldy $60
	bcs +
	dey
+	sta $41
	sty $42
++	jmp endsmb

; ----------------------------------------- 
; 9c28
setsstart	clc		; start search at basic start
	lda $2b
	adc #3		; skip line header
	sta $20
	lda $2c
	adc #0
	sta $21
	rts

; ----------------------------------------- bef EXEC
; 9c36 (was 9cec)		recoded
befexec	lda progz		; save basic pz to stack
	pha
	lda progz+1
	pha
	jsr srem		; now skip to next command
			; (to find the return address for END PROC)

	ldy spexec	; EXEC stack full?
	cpy #20
	bcc +
	jmp err2a		; yes, STACK TOO LARGE ERROR

+	lda progz		; no, save new basic pz to EXEC stack
	sta execstack,y	; (return address after END PROC)
	iny
	lda progz+1
	sta execstack,y
	iny		; and update stackpointer
	sty spexec

	pla		; restore basic pz (EXEC position)
	sta progz+1
	pla
	sta progz

	ldx execflag	; is an EXEC w/o EXEC?
	beq befcall
	jsr dec7a		; yes, basic pz minus 1, then:

; ----------------------------------------- bef CALL
; 9c66			recoded
befcall	jsr basromau	; switch basic rom off
	jsr cfreset	; check exec stack (doesn't return if successful)

	jsr setsstart	; set start address for search
	lda #$31		; search for PROC (code $31)
	sta $22
	lda #10		; identify caller routine
	sta procnffl

search	jsr suchcode	; now search (doesn't return if fail)
	jsr compare
	bne search

	jsr fillfast	; successful, now fill fast stack

found	ldy #0		; branch to found position
	lda $20
	sta progz
	lda $21
	sta progz+1
	jmp befproc	; and process PROC (skip rest of that line)

; ----------------------------------------- 
; 9c90
suchcode	ldy #0
weiter	jsr inc20
suchcode1	lda ($20),y	; end of line?
	beq through

	cmp #$64		; sb token?
	beq simtok	; yes, check if searchcode
	cmp #$22		; no, string to follow?
	bne weiter	; no, continue search

-	jsr inc20		; skip string bytes
	lda ($20),y	; (next byte: line end?)
	beq through
	cmp #$22		; until next quote
	bne -
	beq weiter	; then continue search

; ----------------------------------------- 
; 9cae
			; SB token found, .y=0
simtok	jsr inc20		; next byte:
	lda ($20),y
	cmp $22		; byte to search for?
	bne weiter	; no, continue search

; ----------------------------------------- SEARCH CODE FOUND!
; 9cb7
space	iny		; yes, next byte:
	lda ($20),y	; is space?
	cmp #$20
	bne +
	jsr inc20		; yes, skip
+	lda ($7a),y	; next byte at caller position: 
	cmp #$20		; is space?
	bne +
	jsr incbasbz	; yes, skip
+	dey		; .y=0 again
	rts		; return to calling command
			; (CALL, EXIT, SECURE or fastcall)

; ----------------------------------------- 
; 9ccc
through	ldy #2		; if end of line:
	ora ($20),y	; is end of program?
	beq +

	ldx #4		; no, just skip next line header
-	jsr inc20
	dex
	bne -
	beq suchcode

; ----------------------------------------- 
; 9cdc
+	ldy procnffl	; if end of program:
	cpy #10		; is call from CALL (or EXEC)?
	bne +

	ldx #$21		; yes, PROC NOT FOUND ERROR
	stx procnffl
	dec spexec
	dec spexec
	jmp ($0300)

+	cpy #11		; or is call from EXIT?
	beq ++		; yes, continue there (RTS)

; ----------------------------------------- 
; 9cf5
scd5	pla		; otherwise: just finish command
	pla		; (SECURE)
	jmp endsmb

; ----------------------------------------- 
; 9cfa
compare	iny		; found, now compare:
	lda ($20),y	; position found
	beq +
	cmp (progz),y	; with bytes from call
	bne ++		; not equal if different

+	lda (progz),y	; line end at call?
	beq ++
	cmp #$3a		; or ":"? (end of command)
	bne compare	; eqal if yes
++	rts		; returns equal/not equal

; ----------------------------------------- 
; 9d0c
inc20	inc $20
	bne +
	inc $21
+	rts

; ----------------------------------------- bef END PROC
; 9d13			original
befendproc
	ldy spexec
	cpy #2
	bcs +
	ldx #$26		; error "end proc w/o exec"
	jmp ($0300)

+	dey
	lda execstack,y
	sta progz+1
	dey
	lda execstack,y
	sta progz
	sty spexec
-	jmp endsmb

; ----------------------------------------- bef EXIT
; 9d31			enhanced
befexit	jsr incbasbz
	jsr chrgot
	lda #$8b		; IF?
	jsr schkzei	; (if not: SYNTAX ERROR)
	jsr sfrmevl	; evaluate
	lda $61		; true?
	beq -

+	lda progz		; yes, store basic pz
	sta $20
	lda progz+1
	sta $21
	lda #$36		; now search for END LOOP
	sta $22
	lda #11		; set flag for "not found"
	sta procnffl
	ldy #0
	jsr suchcode1

	lda $20		; branch to found position
	sta progz
	lda $21
	sta progz+1
	dec sploop	; clear LOOP stack
	dec sploop
	tya
	beq +
	ldx #$28 		; LOOP ERROR (if not found)
	jmp ($0300)
+
-	jmp bef0		; finish command

; ----------------------------------------- bef ON KEY
; 9d72			recoded
befonkey	jsr incbasbz
	jsr sgetstr
	sta okstring+1	; controlstring
	stx okstring
	ldy $69		; len
	sty okstrlen
	lda progz
	ldy progz+1
	sta onkeyzeig
	sty onkeyzeig+1
	lda #$5d		; "]" (emergency key)
	sta keyon
	jsr chkkey
	bcs +

	sty onkeypos
+	lda #10
	sta onkeyflag
	ldy #0
	jmp res2

; ----------------------------------------- bef DISABLE
; 9da4			original
befdisable
	lda #0
	sta onkeyflag
	beq -

; ----------------------------------------- 
; 9dab
onkey1	lda onkeypos	; key pressed?
	bne +
	jsr $ffe4		; no, sys get key
	beq oky0
	sta keyon		; store key, is in ctrl string?
	jsr chkonkey	; yes, if .c=0
	bcs oky0

+	lda #0		; found
	sta onkeyflag
	lda progz
	ldx progz+1
	sta basbzk
	stx basbzk+1
	lda onkeyzeig
	ldx onkeyzeig+1
	sta progz
	stx progz+1
	jmp scd5		; continue elsewhere
; 9dd9
chkkey	lda #0
	sta onkeypos
chkonkey	lda okstring	; get on key ctrl string
	ldx okstring+1
	sta $20
	stx $21

	ldy #0
-	cpy okstrlen	; len
	beq oky0
	lda ($20),y	; is key in ctrl string?
	iny
	cmp keyon
	bne -
	clc		; yes: .c=0
oky0	rts

; ----------------------------------------- bef RESUME
; 9df9			recoded
befresume	lda errn		; from ON ERROR?
	bpl res0		; yes, go there

	lda basbzk+1	; direct mode?
	cmp #8
	bcc res3		; yes, leave

	sta progz+1
	lda basbzk
	sta progz
	jsr basromei
	lda #10
	sta onkeyflag
	jmp sintprt0

; ----------------------------------------- 
; 9e17
res0	jsr chrget	; parameters?
	beq res4		; no

	cmp #$82		; NEXT?
	beq +
	jmp cgoto0	; no, goto

+	lda errln		; RESUME NEXT
	ldx errln+1
	sta int
	stx int+1
	jsr sgoto1	; goto errln
	ldy #5
	jsr sbzply

; ----------------------------------------- bef PROC
; 9e35			enhanced
befproc	jsr flinend	; find end of line
	beq +

; ----------------------------------------- 

res4	ldy #0
	lda savecont
	ldx savecont+1
	sta progz
	stx progz+1
	lda (progz),y
	bne res2
	ldy #5
	!by $24
res2	iny
	jsr sbzply
	jsr srem
+	jmp endsmb

; ----------------------------------------- bef LOOP
; 9e57			enhanced
befloop	ldy sploop
	cpy #20
	bcc +
	jmp err2a		; error "stack too large"

+	lda progz
	sta stackloop,y
	iny
	lda progz+1
	sta stackloop,y
	iny
	sty sploop
res3	jmp bef0

; ----------------------------------------- bef ON ERROR
; 9e73			enhanced
befonerror
	jsr incbasbz
	lda progz
	sta onerrzeig
	lda progz+1
	sta onerrzeig+1
	lda #10
	sta onerrorflag
	jsr flinend
	beq swm0

swm1	lda $3d
	ldy $3e
	sta savecont
	sty savecont+1
-	rts		; - label from chkfchlen!

; ----------------------------------------- bef NO ERROR
; 9e95			original
befnoerr	lda #0
	sta onerrorflag
	jmp bef0

; ----------------------------------------- Warmstart
; 9e9d			recoded
swarm	ldx #$20		; bad mode
warmstart	stx errn

	jsr endcheck
	lda onerrorflag	; on error active?
	cmp #10
	beq +
	jmp serrout	; no, error

+	lda onerrzeig+1
	sta progz+1
	lda onerrzeig
	sta progz
	lda $39
	sta errln
	lda $3a
	sta errln+1
	jsr swm1
	ldx stack
	txs
swm0	jmp endsmb

; ----------------------------------------- part of D!
; 9ecd
delend	jsr basromei
	jmp endmrge

; ----------------------------------------- bef OUT
; 9ed3			recoded
befout	jsr basromei
	ldx errn
	jmp outx

; ----------------------------------------- bef OLD
; 9edc			recoded
befold	jsr basromei	; basic ein
	lda #1
	tay
	sta ($2b),y
	jsr $a533		; rechain lines             
	txa
	adc #02
	sta $2d		; set start of basic variables
	lda $23
	jsr $a655		; sys: CLR
	jmp $a474   	; sys: Ready.

; ----------------------------------------- 
; 9ef4
chkfchlen	jsr sgetbytc	; get len
	cpx #89		; too long?
	bcc -
	jmp err14		; yes: illegal quantity

; ----------------------------------------- Part of SCRSV/SCRLD
; 9efe			new, by Peter Hagemann
bloop	sta $fc	
bl	sei
	lda #$34		; RAM unter Kernal ein
	sta pport
	lda ($fb),y
	pha
	lda #$36		; Kernal ROM ein
	sta pport
	cli
	pla	
; 9f0e	
ss2	jsr distr
	sta ($fb),y
	iny
	bne bl
; 9f16
ss3	inc $fc
	dex 		; count pages
	beq bend
	lda status
	beq bl
; 9f1f	
bend	rts

; ----------------------------------------- 
; 9f20
	!by 0

; ----------------------------------------- bef RCOMP
; 9f21			original
befrcomp	jsr incbasbz
	jsr basromei
	jsr incbasbz
	lda ifflag
	sta $61
	jmp inif

; ----------------------------------------- bef PROC (!!!Kopie!!!)
; 9f32
befproc1	jsr flinend
	beq swm0

; ----------------------------------------- 
; 9f37
chkin1	ldx #1
	jmp $ffc6		; sys chkin 1

; ----------------------------------------- 
; 9f3c
;
; End of part 3
;



