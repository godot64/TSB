; ----------------------------------------- 
;
; Tuned Simons' Basic
;
; by Arndt Dettke, 1986
;
; part 7, extension area
;
; patched on 03.05.2021 (command PLACE: optimized)
; patched on 21.07.2022 (bugfix in RENUMBER)
;
; ----------------------------------------- 

	!ct pet

; ----------------------------------------- 
; cc00 
klaa	lda #$28		; 0 "("
	!by $2c
klaz	lda #$29		; 3 ")"
	!by $2c
doll	lda #$24		; f "$"
	!by $2c
proz	lda #$25		; 12 "%"
	!by $2c
colo	lda #$3a		; 18 ":"
	jmp bsout		; out

; ----------------------------------------- Part of RENUMBER
; cc11
isstep0	jsr basromei	; is step 0?
	jsr bloadadr
	beq +
	rts
+	jsr basromau
	jmp err14		; affects "tsb.mem"!

; ----------------------------------------- 
; cc20
arrbreak	jsr $ffe1		; sys STOP?
	beq stopped	; yes
	jsr getkey	; get key - affects "tsb.mem"!
	jsr $ffe1
	beq stopped
	rts
; cc2d
stopped	pla
	pla
	jmp nrm2		; back to all normal
			; affects "tsb.mem"!

; ----------------------------------------- 
; cc33
initvecs	lda $2f
	sta $20
	sta $5f
	lda $30
	sta $21
	sta $60
	rts

; ----------------------------------------- 
; cc40
skiparr	ldy #$02
	clc
	lda ($5f),y
	adc $5f
	tax
	iny
	lda ($5f),y
	adc $60
	sta $60
	sta $21
	txa
	sta $5f
	sta $20
	rts

; ----------------------------------------- 
; cc57
outdigits	jsr $b395		; sys int to float (hi .a, lo .y)
	jsr $bddf		; sys fac to asc
	jmp $ab1e		; sys string out

; ----------------------------------------- 
; cc60
arrdims	jsr klaa		; "("
	jsr getdims	; dims out
	jsr klaz		; ")"
	jsr colo		; ":"
	jsr return	; cr
	jmp return	; cr

; ----------------------------------------- 
; cc72
getdims	jsr inc20
	jsr inc20
	jsr inc20
	lda ($20),y
	sta $0b
	sta $af
	asl
	sta $02
	ldx #$ff
	stx helpvec
-	ldy $02
	lda ($20),y
	tax
	dey
	lda ($20),y
	dex
	cpx #$ff
	bne +
	sec
	sbc #1
+	jsr $bdcd		; sys int out
	ldy $02
	ldx $b0
	inx
	lda ($20),y
	sta $02c0,x
	dey
	inx
	lda ($20),y
	sta $02c0,x
	stx helpvec
	stx helpvec+1
	dec $02
	dec $02
	beq +
	jsr komma		; out ","
	bne -

+	inc helpvec
	lda helpvec
	tax
	asl
	sta $02
	lda #0
-	sta $02c0,x	; and clear for next one
	inx
	cpx $02
	bmi -
	rts

; ----------------------------------------- 
; ccce
endplace	jmp bef0		; affects "tsb.mem"!

; ----------------------------------------- bef PLACE
; ccd1			new
befplace	jsr basromei
	jsr chrget
	jsr $b113		; sys is char? (one array)
	bcc +
	jmp onearray	; yes

+	cmp #$30		; no, is "0"? (all arrays)
	beq +
	jmp $af08		; no, sys syntax error

+	jsr return	; yes, cr
	jsr initvecs	; init vecs
-	lda $21
	cmp $32
	bne +
	lda $20
	cmp $31
	beq endplace

+	jsr arrays	; array found, out 
	jsr skiparr
	jsr return	; out cr
	bne -
; cd03
arrays	ldy #0
	lda ($20),y
	sta $45
	bmi intarr
	jsr bsout		; out array name 1
	jsr inc20
	lda ($20),y
	sta $46
	bmi strarr
	jsr bsout		; out float array name 2
	lda #0
	beq +
; cd1e
intarr	and #$7f		; out int array name 1
	jsr bsout
	jsr inc20
	lda ($20),y
	sta $46
	and #$7f		; out int array name 2
	jsr bsout
	jsr proz		; out "%"
	lda #$80
; cd34
+	sta $0e
	jsr arrdims	; out dims
	jsr $b194		; sys first element
-	jsr arrbreak	; STOP? (doesn't return if yes)
	lda helpvec+1
	sta helpvec
	jsr outpos	; out position in array
	ldx #0		; set as numeric
	stx $0d
	jsr fltarr	; out float array
	bne -
	rts

; ----------------------------------------- 
; cd50
strarr	and #$7f		; out string array name 2
	jsr bsout
	jsr doll		; out "$"

	jsr arrdims	; out dims
	jsr $b194		; sys first element
-	jsr arrbreak	; STOP? (doesn't return if yes)
	lda helpvec+1
	sta helpvec
	jsr outpos	; out position in array
	ldx #$ff		; set as string
	stx $0d
	jsr $af2b		; sys get variable
	jsr quote		; out quote
	ldy #2
	lda ($64),y
	cmp #8
	bcc +
	jsr $ab21		; sys out string
+	jsr quote		; out quote
	jsr nextarr
	bne -
	rts

; ----------------------------------------- 
; cd86
outpos	jsr klaa
	lda $af		; show position in array
	sta $02
	sta $0b
	asl
	sta helpvec
-	ldx helpvec
	lda $02c0,x	; lo nach .y
	tay
	inx
	lda $02c0,x
	pha
	tax		; hi nach .x
	tya
	pha		; beide auf Stack (hi zuerst)
	txa
	inc helpvec
	inc helpvec
	jsr outdigits	; zuvor: klaa
	dec $02
	beq +
	jsr komma
	bne -
+	jsr klaz
	jsr leerzch	; zuvor: klaz
	jsr outeql
	jsr leerzch
	ldy #4
	jmp $b2ea		; sys search for element

; ----------------------------------------- 
; cdc2
fltarr	jsr $af2b		; get variable
	jsr $bddd		; fac to asc
	jsr $ab1e		; sys string out

nextarr	jsr arrbreak
	jsr return
	lda $af
	asl
	sta $02
	tax
	ldy #0
-	inc $02c0,x
	bne +
	inc $02c1,x
+	lda $02c0,x
	cmp $02c0,y
	bne +
	lda $02c1,x
	cmp $02c1,y
	bne +
	lda #0
	sta $02c0,x
	sta $02c1,x
	inx
	inx
	iny
	iny
	cpy $02
	bne -
+	rts

; ----------------------------------------- 
; ce02
onearray	sta $45		; store first char
	ldx #0
	jsr chrget
	bcc +
	jsr $b113		; sys is char?
	bcc ++		; no

+	tax		; yes
-	jsr chrget	; more chars in varname?
	bcc -		; yes, skip all
	jsr $b113
	bcs -

++	cmp #$24		; now: is "$"?
	beq +
	cmp #$25		; is "%"?
	bne ++		; no

	lda #$80		; mark as int
	ora $45
	sta $45
+	txa
	ora #$80
	tax
++	stx $46		; mark as string
	jsr return	; out cr

	jsr initvecs
-	lda $21
	cmp $32
	bne +
	lda $20
	cmp $31
	beq err2c		; error (not found)
+	ldy #0
	lda ($20),y
	cmp $45
	bne +
	iny
	lda ($20),y
	cmp $46
	beq ++
+	jsr skiparr
	jmp -

++	jsr arrays	; found array, out
	jmp endplace

; ----------------------------------------- 

err2c	ldx #$2d		; error "array nor found"
	jmp ($0300)

tsbfd	!tx "array not founD"

; ----------------------------------------- part of RENUMBER
; ce70
ren5	lda ($a8),y	; get line link hi
	pha
	iny
	lda ($a8),y	; get line num to INT
	sta int
	iny
	lda ($a8),y
	sta int+1
	txa
	sta $a8		; reget line link low
	pla		; and hi
	sta $a9
	jmp ren2		; back to ren2

; ----------------------------------------- 
; ce86
	!by 0,0,0,0

; ----------------------------------------- RENUMBER: Scan Basic Line
; ce8a
rbnb	jsr inca8a9
rbnc	jsr inca8a9
	lda ($a8),y	; (.y=0) get hi line num
	beq rnb2		; (rts) leave if at prg end
	jsr inca8a9
	lda ($a8),y	; store position to 39/a
	sta $39
	jsr inca8a9
	lda ($a8),y
	sta $3a
--	ldx #7		; check 6 reference tokens
rnb0	jsr inca8a9
-	lda ($a8),y	; relevant token?
	beq rbnb		; line end: next line
	cmp tokens-1,x
	beq +		; yes, relevant token found
	dex
	bne -		; next reference
	beq --		; next byte in basic line

+	cpx #6		; found RCOMP or RESET?
	bcc rnb6		; no V2 token
	lda $a8		; pre-token ($64) correct?
	bne +
	dec $a9
+	dec $a8
	lda ($a8),y
	jsr inca8a9
	cmp #$64
	bne rnb0		; no, continue search
rnb6	jsr rnb1		; yes, write new line num
	beq +		; uncond. branch (.y=0)

rnb5	jsr inca8a9
+	cmp #0		; line end?
	beq --		; yes, cont. search
	cmp #$3a		; ":"?
	beq --		; yes, cont. search
	lda ($a8),y
	cmp #$20		; skip spaces
	beq rnb5
	cmp #$2c		; ","? (list after ON?)
	beq rnb6		; yes: write line nums
	cmp #$ab		; token of "-"? (after LIST)
	beq rnb6		; yes: write line num
	ldx #7		; otherwise: cont. search
	bne -		; uncond. branch

rnb2	rts

; ----------------------------------------- RENUMBER: Write New Line Nums
; ceed
-	jsr inca8a9
rnb1	lda $a8		; what is following token?
	ldx $a9
	sta progz
	stx progz+1
	jsr chrget
	cmp #$ab		; token of "-"? (in LIST)
	beq -		; yes, skip
	jsr chrgot	; line num?
	bcs rnb2		; no, cont. search

	jsr $a96b		; sys linenumber to adr in INT
	jsr enternum	; compute new line num
	jsr $bc49		; sys int to float (returns .y=0)
	jsr $bddf		; sys fac to asc (in linenum $0100, returns .a=0)
	tax
-	lda linenum,x
	beq +		; end of digits
	inx
	bne -
+	inx
	stx $71		; len of new line num to 71
rnb8	ldy #0		; does it fit in old location? 
	sec
	lda progz
	sbc $a8
	cmp $71
	bmi rnb3		; no, move prg 1 byte ahead
	bne rnb4		; or is it shorter?

-	jsr inca8a9	; no, fits
rnb7	ldx #0		; write new line num to old position
	lda linenum,y	; set flag for success (.a=1)
	beq +
	sta ($a8,x)
	iny
	bne -

+	lda #1		; return to scan of basic lines
	ldy #0
	rts

; ----------------------------------------- Fill up Line Num space
; cf3d
rnb4	jsr inca8a9	; fill shorter nums w/ spaces
	tax
	dex
	lda #$20
-	sta ($a8),y
	iny
	dex
	bne -
	ldy #0
	beq rnb7		; now write into basic line

; ----------------------------------------- Stretch Basic PRG

rnb3	jsr moveprg	; make prg 1 byte longer (returns .a=0)
	dec $71
	tax
	beq rnb8		; does line num fit now?

; ----------------------------------------- 
; cf56
tokens	!by $9b,$a7,$8d,$89,$8a,$30,$46
	; tokens: LIST,THEN,GOSUB,GOTO,RUN,RESET,RCOMP

; ----------------------------------------- RENUMBER: Count Basic Lines
; cf5d
enternum	ldy #0		; reset counter (58/9)
	sty $59
	sty $58
	lda $20		; get start line num (to 62/3)
	ldx $21
	stx $62
	sta $63
	lda $2b		; ge tbasic start (to 5f/60)
	ldx $2c
	sta $5f
	stx $60
-	iny
	iny
	iny
	lda ($5f),y	; line num hi
	cmp int+1		; equals refenrece line num (max prg num at 1st time)?
	bne +
	dey
	lda ($5f),y
	cmp int
	beq rnb9		; yes, check limit and leave sub
	iny		; no, now...
+	dey
	dey
	inc $58		; ...count lines
	bne +
	inc $59
+	lda ($5f),y
	tax
	dey
	lda ($5f),y
	sta $5f
	txa
	sta $60		; at prg end?
	bne -		; no, cont. counting
	jmp $bdc2		; yes, sys out "in linenumber", reference line not found

; ----------------------------------------- RENUMBER: Check for max line num
; cf9c
--	dec $59
-	dec $58
rnb9	clc		; add step count times to start line num
	lda $63		; (so getting new line num)
	adc ay
	sta $63
	lda $62
	adc ay+1
	sta $62
	lda $58		; count down lines
	bne -
	lda $59
	bne --
	ldy $63
	lda $62
	cmp #$fa		; result greater than 63999?
	bcs +		; yes (bad mode error)
	ldx #$90		; no, start scanning
	sec
+	rts

; ----------------------------------------- RENUMBER: Move PRG by 1 Byte
; cfc3
moveprg	lda $a8		; current position
	ldx $a9
	sta $58		; as reference
	stx $59
	ldx $2d		; start at prg end
	ldy $2e
	dex
	bne +
	dey
+	stx $a8
	sty $a9
	ldy #1		; move by 1 byte larger
	ldx #0
-	lda ($a8,x)
	sta ($a8),y
	lda $a8		; count down bytes
	bne +
	dec $a9
+	dec $a8
	lda $a9		; until start position
	cmp $59
	bne -
	lda $a8
	cmp $58
	bne -
	jsr $a533		; then sys bind lines (returns .a=0)
	inc $2d		; increase prg end by 1
	bne +
	inc $2e
+	rts

; ----------------------------------------- 
; cffd
	!by 0,0,0

; ----------------------------------------- 
; d000 End of TSB
;
; End of part 7
;



