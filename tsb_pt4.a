; ----------------------------------------- 
;
; Tuned Simons' Basic
;
; by Arndt Dettke, 1986
;
; part 4
;
; patched on 13.01.2021 (commands GLOBAL & LOCAL)
; patched on 25.01.2021 (added command CHECK)
; patched on 04.04.2021 (commands CHECK, DO, CSET & NRM)
; patched on 07.04.2021 (command DESIGN: optimized)
; patched on 12.04.2021 (command AUTO)
; patched on 14.04.2021 (commands PAUSE, BCKGNDS)
; patched on 03.05.2021 (command DUMP: optimized)
; patched on 06.05.2021 (added new command DRAW TO)
; patched on 22.11.2021 (command LOCAL: bugfix)
; patched on 29.11.2021 (added hold DIR output on keypress)
; patched on 16.04.2022 (command FETCH: complies with RVS mode)
;
; ----------------------------------------- 

	!ct pet

; ----------------------------------------- 
; 9f3c			new
outeql	lda #$3d		; =
	!by $2c
komma	lda #$2c		; ,
	!by $2c
clear	lda #$93		; CLS
	!by $2c
leerzch	lda #$20		; space
	!by $2c
quote	lda #$22		; "
	!by $2c
return	lda #$0d		; Return
	jmp bsout
	
; ----------------------------------------- bef DUMP
; 9f50			enhanced
befdump	lda $2d		; get start of vars
	sta $20
	lda $2e
	sta $21
dit6	jsr return	; sys out cr
	lda $21
	ldy #0
	cmp $30		; is at start of arrays?
	bcc dit0
	beq +
	bcs dit1
+	lda $20
	cmp $2f
	bcc dit0
dit1	jmp bef0		; yes, end of command

; ----------------------------------------- 
; 9f70
dit0	lda ($20),y	; get 1st char of varname
	sta $a6
	bpl dit3		; check type
	and #$7f
	jsr bsout		; first is shifted (FN or integer)
	jsr inc20
	lda ($20),y	; get 2nd char of shifted varname
	bmi dit4
	jsr bsout		; not shifted, so FN function
	lda #$21		; !
	jsr bsout
	ldy #6
	bne dit5

dit4	and #$7f		; 2nd is shifted, so integer
	jsr bsout
	lda #$25		; %
	jsr bsout
	jsr outeql
	jsr inc20
	lda ($20),y
	sta $62
	jsr inc20
	lda ($20),y
	sta $63
	ldx #$90
	sec
	jsr sxflppl
	jsr sfacasc
	jsr outasc
	ldy #4
	bne dit5

dit3	jsr bsout
	jsr inc20
	lda ($20),y	; get 2nd char of unshifted varname
	sta $a6
	bpl dit7

	and #$7f		; shifted, so string
	jsr bsout
	lda #$24		; $
	jsr bsout
	jsr outeql

	jsr quote		; string start
	jsr inc20
	lda ($20),y	; len
	sta $a8
	jsr inc20
	lda ($20),y	; address
	sta $23
	jsr inc20
	lda ($20),y
	sta $24
-	cpy $a8		; string out
	beq dit8
	lda ($23),y
	jsr bsout
	iny
	bne -
dit8	jsr quote		; string end
	ldy #3

dit5	jsr inc20		; skip to next variable
	dey
	bne dit5

	jsr getkey	; key pressed?
	jmp dit6		; start over

; ----------------------------------------- 
; a007
dit7	jsr bsout		; 2nd char unshifted, so float
	jsr inc20
	lda $20
	ldy $21
	jsr sfldfack
	jsr sfacasc
	jsr outeql
	jsr outasc
	ldy #5
	bne dit5

; ----------------------------------------- 
; a021
outasc	ldx #0
-	lda linenum,x
	beq +
	jsr bsout
	inx
	bne -
+	rts

; ----------------------------------------- part of DO
; a02f
do8	jsr sfordo	; search for DO
	pla
	pla
	jmp do9

; ----------------------------------------- part of INST and MEM
; a037
setbmode	iny		; change bef vectors
-	lda vecbmode,y	; to bad mode
	sta vecplace,y
	sta vecrenum,y
	dey
	bpl -
	jmp bef0

; ----------------------------------------- 
; a047
charen1	lda pport
	ora #4
	sta pport
	rts

; ----------------------------------------- 
; a04e
charen0	lda pport
	sei
	and #$fb
	sta pport
	rts

; ----------------------------------------- 
; a056
-	jmp endsmb

; ----------------------------------------- bef DRAW
; a059			enhanced
befdraw	jsr drawto	; check if DRAW TO
	jsr sgetstr	; no, just DRAW, get string
	stx $ac		; address
	sta $ad
	lda $69		; len
	pha
	jsr schkcom	; comma?
	jsr sgetadr	; x
	sty drx
	sta drx+1
	jsr sgetbytc	; comma?
	stx dry		; y
	jsr getpktf	; draw mode
	pla		; len back
	sta $5f
	lda #0
	sta drstrz
	lda rotgr
	sta drgrz

--	sty drstatus
	stx dryanf
	ldy drstrz
	lda ($ac),y
	cpy $5f
	beq -
	iny
	clc
	sbc #$2f
	pha
	dec drgrz
	lda drgrz
	bne +
	lda rotgr
	sta drgrz
	sty drstrz
+	ldx dryanf
	pla
	ldy drstatus
	cmp #9
	bcs -
	sta drricht
	cmp #5
	bcc +
	clc
	sbc #4
+	tax
	lda drawtabx,x
	sta drincx
	lda drawtaby,x
	sta drincy
	lda drincx
	beq +++
	cmp #$ff
	bne ++
	lda drx
	bne +
	dec drx+1
+	dec drx
	jmp +++

++	inc drx
	bne +++
	inc drx+1
+++	lda drincy
	beq ++
	cmp #$ff
	bne +
	dec dry
	jmp ++

+	inc dry
++	lda drx
	sta $09
	lda drx+1
	sta $0a
	lda dry
	sta $a4
	lda drricht
	cmp #5
	bcc +
	jsr punkt
	jsr kerromein
+	jmp --

; ----------------------------------------- 
; a120

tabrot	!by $01,$00,$00,$ff,$00,$ff,$01,$00
	!by $01,$01,$ff,$ff,$01,$ff,$01,$ff
	!by $00,$01,$ff,$00,$01,$00,$00,$ff
	!by $ff,$01,$ff,$01,$01,$01,$ff,$ff
	!by $ff,$00,$00,$01,$00,$01,$ff,$00
	!by $ff,$ff,$01,$01,$ff,$01,$ff,$01
	!by $00,$ff,$01,$00,$ff,$00,$00,$01
	!by $01,$ff,$01,$ff,$ff,$ff,$01,$01

; ----------------------------------------- bef ROT
; a160			original
befrot	jsr sgetbytn
	cpx #8
	bcc +
	jmp swarm		; error bad mode
+	txa
	asl
	asl
	asl
	tax
	ldy #0
-	lda tabrot,x
	sta drawtabx,y
	inx
	iny
	cpy #8
	bmi -
	jsr sgetbytc
	stx rotgr
	jmp endsmb

; ----------------------------------------- bef CHAR
; a186			original
befchar	jsr sgetadrn
	sty $09
	sta $0a
	jsr sgetbytc
	stx $a4
	jsr schkcom
	jsr sgetadr
	sty $ac
	sta $ad
	jsr getpktf
	jsr sgetbytc
	txa
	bne +
	ldx #1
+	stx chgr
	jsr charzei
	jmp endsmb

; ----------------------------------------- 
; a1b0
sgetadrn	jsr incbasbz
	jmp sgetadr

; ----------------------------------------- 
; a1b6
charzei	lda #0
	sta drx
	jsr charen0
	asl $ac
	rol $ad
	asl $ac
	rol $ad
	asl $ac
	rol $ad
	clc
	lda #0
	adc $ac
	sta ey
	lda #$d0		; add $d000
	adc $ad
	sta ey+1
	lda #$00
	sta $ac
	sta $ad
	inc $ad
	lda $09
	sta ax
	lda $0a
	sta ax+1
	lda $a4
	sta ay

-	ldy drx
	lda $ac
	and #7
	tax
	lda ey
	sta $fe
	lda ey+1
	sta $ff
	lda ($fe),y
	and gbittabs,x
	beq +
	jsr punkt
	jsr kerromein
+	inc $ac
	inc ax
	bne +
	inc ax+1
+	lda $ac
	cmp #8
	bne chz0
	lda #0
	sta $ac
	clc
	lda ax
	sbc #7
	sta ax
	lda ax+1
	sbc #0
	sta ax+1
	lda $ad
	cmp chgr
	bne +
	inc drx
	lda #0
	sta $ad
+	inc ay
	inc $ad
	lda drx
	cmp #8
	bne chz0
	jmp charen1

chz0	lda ax
	sta $09
	lda ax+1
	sta $0a
	lda ay
	sta $a4
	jmp -

; ----------------------------------------- 
; a263
ptest1	sty status
	jsr tdot0
	jmp kerromein

; ----------------------------------------- 
; a26b
	!by 0,0,0,0,0,0,0

; ----------------------------------------- bef HICOL
; a272			original
befhicol	lda #0
	sta lowcolflag
	jmp bef0

; ----------------------------------------- bef CHECK
; a27a			new
befcheck	lda #>procstack	; set procstack address
	ldy #<procstack
	sta $21
	sty $20
	tya		; clear stack
-	sta ($20),y
	iny
	bne -

	ldx #$ff
	jsr setsstart	; von programmstart 13
--	ldy #0
-	jsr inc20
	lda $21		; bis variablenstart
	cmp $2e
	bne +
	lda $20		; ende erreicht?
	cmp $2d
	beq fsende
+	lda ($20),y	; nein, ist laufendes byte ein tsb token?
	cmp #$64
	bne -
	iny
	lda ($20),y	; ja, nämlich PROC? 
	cmp #$31
	bne --		; 30

	inx		; ja, adresse in liste eintragen
	lda $20
	clc
	adc #2
	sta procstack,x
	lda $21
	adc #0
	inx
	sta procstack,x
	cpx #$ff		; liste voll?
	bne --		; 21

	dex		; ja, flag setzen ($ff)

fsende	inx		; programmende erreicht:
	stx prstack	; neues prstack setzen
	jmp bef0		; 8

; ----------------------------------------- bef ELSE
; a2c8			recoded
befelse	lda doflag
	beq +
	lda #$47
	sta doflag
+	jmp befproc

; ----------------------------------------- Part of DIR
; a2d5
fromdir	bne +		; anything following?
	ldx #1		; no, set length of filename ("$"): 1
	stx $69
	ldx #<dollars+1	; address of name ($9558)
	lda #>dollars+1
	rts		; return to DIR
+	jmp sgetstr	; return to regular DIR

; ----------------------------------------- Check if ON or OFF follow
; a2e3			enhanced
chkonoff 	ldx #10		; if yes: .x=10
-	jsr chrget	; read next byte
	cmp #$91		; ON?
	beq setonoff
	cmp #$64		; TSB token?
	beq -
	cmp #$69		; OFF?
	beq setoff
	jmp sgetbyt1	; no, get parameter (to .x)
setoff	ldx #0
setonoff	jmp incbasbz	; (25)

; ----------------------------------------- bef LOCAL
; a2fc			recoded

--	jsr incbasbz	; loop for next var
	bne +
; a301
beflocal	jsr setoff	; set .x to 0
+	txa
	pha
	jsr sgetvar	; search variable
	pla
	tax
	lda $5f		; get address
	sta localtab,x	; and store in LOCALTAB
	inx
	lda $60
	sta localtab,x

	inx		; transfer name of variable to LOCALTAB
	ldy #0		; so, each LOCAL entry has 4 bytes
-	lda ($5f),y
	sta localtab,x
	inx
	iny
	cpy #2
	bne -

	ldy #0		; hide variable in system table
	lda #$ff
	sta ($5f),y

	cpx #84		; buffer filled? (max 21 entries)
	bcs lcf0		; yes, finish LOCALTAB

	jsr chrgot	; anything following?
	beq lcf0		; no, finish LOCALTAB
	cmp #$2c		; comma following?
	beq --		; yes, next variable

lcf0	lda #0		; no, set tab terminator ($0000)
	sta localtab,x
	inx
	sta localtab,x
	jmp endsmb

; ----------------------------------------- bef GLOBAL
; a343			original
befglobal	ldx #0
--	lda localtab,x
	sta $5f
	inx
	lda localtab,x
	sta $60
	bne +
	jmp bef0

+	inx
	ldy #0
-	lda localtab,x
	sta ($5f),y
	inx
	iny
	cpy #2
	bne -
	beq --

; ----------------------------------------- 
; a365
linzei	clc
	lda ax
	sbc xmaxlow
	lda ax+1
	sbc xmaxhigh
	bcc +
	lda xmaxlow
	sta ax
	lda xmaxhigh
	sta ax+1
+	clc
	lda ex
	sbc xmaxlow
	lda ex+1
	sbc xmaxhigh
	bcc +
	lda xmaxlow
	sta ex
	lda xmaxhigh
	sta ex+1
+	lda ay
	cmp #$c7		; 199?
	bcc +
	lda #$c7		; no, now 199
	sta ay
+	lda ey
	cmp #$c7
	bcc mobbeweg
	lda #$c7
	sta ey

; ----------------------------------------- 
; a3b3
mobbeweg	lda #0
	sta ydiff
	sta ay+1
	sta ey+1
	sta ydiff+1
	sta diffv
	sta diffv+1
; a3c7
vloop	lda ax
	sta $09
	lda ax+1
	sta $0a
	lda ay
	sta $a4
	lda ay+1
	sta $a5
	lda mobbew
	cmp #$f0
	bne +
	jsr mobposs
	jmp vergl
+	jsr punkt
; a3eb
vergl	lda diffv
	ora diffv+1
	beq +
; a3f3
vergl1	jsr ynext
	jmp vloop

+	lda ax+1
	sta vgla+1
	lda ax
	sta vgla
	lda ex+1
	sta vgle+1
	lda ex
	sta vgle
	jsr vglae
	bne diff
	lda ay+1
	sta vgla+1
	lda ay
	sta vgla
	lda ey+1
	sta vgle+1
	lda ey
	sta vgle
	jsr vglae
	beq +
	jsr ynext
	jmp vloop
+	rts

; ----------------------------------------- 
; a43a
diff	sec
	lda ey
	sbc ay
	tay
	lda ey+1
	sbc ay+1
	pha
	tya
	pha
	bcs +
	pla
	pla
	sec
	lda ay
	sbc ey
	tay
	lda ay+1
	sbc ey+1
	pha
	tya
	pha
+	clc
	pla
	adc ydiff
	sta ydiff
	pla
	adc ydiff+1
	sta ydiff+1
	sec
	lda ex
	sbc ax
	tay
	lda ex+1
	sbc ax+1
	pha
	tya
	pha
	bcs +
	pla
	pla
	sec
	lda ax
	sbc ex
	tay
	lda ax+1
	sbc ex+1
	pha
	tya
	pha
+	pla
	sta xdiff
	pla
	sta xdiff+1
	lda #0
	sta diffv+1
; a4a2
-	sta diffv
	sec
	lda ydiff
	sbc xdiff
	tay
	lda ydiff+1
	sbc xdiff+1
	pha
	tya
	pha
	bcc ++
	pla
	sta ydiff
	pla
	sta ydiff+1
	inc diffv
	bne +
	inc diffv+1
+	lda diffv
	jmp -
; a4ce
++	pla
	pla
	lda ax+1
	sta vgla+1
	lda ax
	sta vgla
	lda ex+1
	sta vgle+1
	lda ex
	sta vgle
	jsr vglae
	beq +++
	bcc ++
	lda ax
	bne +
	dec ax+1
+	dec ax
	jmp +
++	inc ax
	bne +
	inc ax+1
+	lda diffv
	ora diffv+1
	bne +
+++	jmp vloop
+	jmp vergl1

; ----------------------------------------- 
; a513
ynext	lda diffv
	ora diffv+1
	beq ++
	lda diffv
	bne +
	dec diffv+1
+	dec diffv
++	lda ay+1
	sta vgla+1
	lda ay
	sta vgla
	lda ey+1
	sta vgle+1
	lda ey
	sta vgle
	jsr vglae
	beq +++
	bcs ++
	inc ay
	bne +
	inc ay+1
+	rts

++	lda ay
	bne +
	dec ay+1
+	dec ay
+++	rts

; ----------------------------------------- 
; a55a
tofind	lda $a6
	cmp $a8
	bne +
	lda $a7
	cmp $a9
	beq ++
+	lda $a6
	sta $a8
	sta $63
	lda $a7
	sta $62
	sta $a9
	ldx #$90
	sec
	jsr sxflp
	jsr sfacasc
	jsr outasc
	sec
	jsr $fff0		; sys get crsr pos
	tya
-	sbc #10
	bcs -
	eor #$ff
	adc #1
	tax
	inx
-	dex
	bne +
++	jmp fcont

+	lda #$20		; sys out space
	jsr bsout
	jmp -

; ----------------------------------------- bef FIND
; a59b			original
beffind	jsr incbasbz
	lda #$ff
	sta $a8
	sta $a9
	ldy #0
	lda $2b		; get start of basic code
	sta $20
	lda $2c
	sta $21
	bne infind
; a5b0
fnd0	lda (progz),y
	beq tofind
	lda ($20),y
	beq fcont
	lda (progz),y
	cmp ($20),y
	bne fcont
	iny
	bne fnd0
; a5c1
fcont	jsr inc20
	ldy #0
	lda ($20),y
	bne fnd0
	jsr inc20
	ldy #0
	sty pendflag
	lda ($20),y
	bne infind
	lda #1
	sta pendflag
infind	jsr inc20
	lda ($20),y
	bne +
	lda pendflag
	cmp #1
	bne +
	jmp $e386		; sys Ready (.x=$80)

+	jsr inc20
	lda ($20),y
	sta $a6
	jsr inc20
	lda ($20),y
	sta $a7
	jsr inc20
	bne fnd0		; uncond. branch

; ----------------------------------------- part of use
; a5ff
	tax
use8	lda $63
	cmp #$2a		; "*"?
	beq +
	lda #$20		; " "
	bne +
use9a	tax
	lda #$30		; "0"
-
+	jsr genout	; generate outstring
	dex
	bne -
	rts
; a614
genout	ldy $44
gno0	sta $02a7,y
	inc $44
	rts

; ----------------------------------------- 
; a61c
vglae	lda vgla
	cmp vgle
	beq +
	lda vgla+1
	sbc vgle+1
	ora #1
	rts

+	lda vgla+1
	sbc vgle+1
	rts

; ----------------------------------------- bef DESIGN
; a634			original
befdesign	jsr sgetbytn
	stx $aa		; cset type (0..3)
	cpx #4
	bcc +
	jmp swarm		; error bad mode if not

+	lda #0		; init:
	sta ax		; hight of object (up to 8 or 21)
	sta ay		; width of object (1 or 3)
	sta $a6		; index into target

	jsr schkcom	; get target address
	jsr sgetadr
	sty $ae
	sta $af

; ----------------------------------------- main loop
; a654
design	ldy #0		; init gather byte
	sty $a8
	ldx #0		; init byte line counter (0..7)
	stx $a9		; index into multi bits (0..3)

	jsr skipline	; find end of basic line

+	jsr incbasbz	; proceed:
	lda (progz),y
	sta ax+1
	jsr incbasbz
	lda (progz),y	; found end of program?
	ora ax+1
	beq err2b		; yes, error

+	jsr incbasbz	; skip next basic line header
	jsr incbasbz

; ----------------------------------------- per line loop
; a677
desloop	jsr incbasbz
	lda (progz),y	; skip "@", .y=0
	cmp #$40
	beq desloop

; ----------------------------------------- 
; here in .a: first definition sign

	stx $ab		; save .x
	ldy $aa		; get type 
	beq deshires
	cpy #2		; type 0 or 2? (hires objects)
	beq deshires
; a68a
desmulti	ldy $a8		; no, multi: get gatherbyte
	ldx $a9		; get index into multi bits
	inc $a9		; and increment it for next pass
	inc $ab		; also normal index (to gain 8 there)

	cmp #$44		; "D"?
	bne +
	tya
	ora destab3,x
	bne des2
+	cmp #$43		; "C"?
	bne +
	tya
	ora destab2,x
	bne des2
+	cmp #$42		; "B"?
	bne +
	tya
	ora destab1,x
	bne des2
; a6a6
deshires	cmp #$42		; "B"? (color1 pixel)
	beq des1

+	cmp #$2e		; "."? (transparent)
	beq descont
	cmp #$20		; " "? (dito)
	beq descont
	cmp #$41		; "A"? (dito)
	beq descont
; a6c0
err2c2	ldx #$2c		; no, error "bad char f. a mob"
	!by $2c
err2b	ldx #$2b		; error "too few lines"
	jmp ($0300)
; a6c8
des1	lda $a8		; set B-pixels (color1 for MOB SET)
	ora gbittabs,x
des2	sta $a8
; a6cf
descont	ldy #0
	ldx $ab		; re-get .x
	inx		; proceed to next line in byte
	cpx #8
	bne desloop

; ----------------------------------------- after line
; a6d8
	ldy $a6		; get target index
	lda $a8		; get gathered byte
	sta ($ae),y	; store to target
	inc $a6		; increment target index
	inc ay		; increment width of object

	ldy #0		; reset .y
	ldx #0		; re-init gather byte
	stx $a8
	stx $a9

	lda $aa		; check type
	cmp #2		; is 2 or 3 (chars)
	bcs +
	lda ay		; no, 0 or 1 (mobs)
	cmp #3		; so: is width=3?
	beq +
	jmp desloop	; no, loop

; ----------------------------------------- line finished
; a6fb
+	sty ay		; line finished, init width counter
	inc ax		; increment object height
	ldx ax		; get height
	lda $aa
	cmp #2		; of char?
	bcc +
	cpx #8		; yes, complete?
	beq ++		; yes
+	cpx #21		; of mob: is height=21?
	beq ++		; yes, complete

	jmp design	; no, proceed

; ----------------------------------------- object finished
; a715
++	jsr skipline	; finished, find end of basic line
	jmp endsmb	; and return to interpreter

; ----------------------------------------- 
; a71b
skipline	lda (progz),y	; now find basic line end
	beq +
	jsr incbasbz
	bne skipline
+	rts

; ----------------------------------------- multicolor pixel pattern
; a725
destab3	!by $c0,$30,$0c,$03		; %11: D $d800..
destab2	!by $80,$20,$08,$02		; %10: C $d023
destab1	!by $40,$10,$04,$01		; %01: B $d022
				; %00: A $d021

; ----------------------------------------- 
; a731
get10010	jsr incbasbz	; skip token
	jsr chrgot	; anything following?
	bne +
	lda #100		; no, set start value
	sta autozi
	sta $a4
	ldx #10		; set step
	stx ay		; (also for RENUMBER)
	lda #0
	sta autozi+1
	sta $a5
+	rts		; 24

; ----------------------------------------- part of DO
; a74d
waitkey	jsr getkey+5
	jmp befproc	; skip rest of line

; ----------------------------------------- part of DO
; a753
whichdo	bcs waitkey	; "null"? (yes, if .c)

	ldy #$ff		; no, DONE?
-	iny
	lda (progz),y
	cmp tuned+5,y	; "ne"?
	beq -
	cpy #2
	jmp dodone

; ----------------------------------------- bef RLOCMOB
; a764			original
befrlocm	jsr sgetbytn
	stx mobnr2
	stx mobnr
	asl mobnr2
	lda $d010
	ora mbittabs,x
	cmp $d010
	bne +
	lda #1
	!by $2c
+	lda #0
	sta ax+1
	ldy mobnr2
	lda $d000,y
	sta ax
	lda $d001,y
	sta ay
	lda #0
	sta ay+1
	jsr getxyf
	jmp mobcont

; ----------------------------------------- 
; a79d
null	!tx "null"

; ----------------------------------------- bef CMOB
; a7a1			original
befcmob	jsr sgetbytn
	stx $d025
	jsr sgetbytc
	stx $d026
	jmp endsmb

; ----------------------------------------- bef BCKGNDS
; a7b0			enhanced
befbckgnds
	jsr sgetbytn	; get backgrnd color
	stx $d021
	txa		; bit 7 set?
	bmi +

	lda $d011		; no, activate ECM
	and #$df
	ora #$40
	sta $d011
	lda $d016		; deactivate multicolor mode
	and #$ef
	sta $d016

+	jsr sgetbytc	; get 2nd bkgnd
	stx $d022
	jsr sgetbytc	; get 3rd bkgnd
	stx $d023
	jsr sgetbytc	; get 4th bkgnd
	stx $d024
	jmp endsmb

; ----------------------------------------- bef PAUSE
; a7e0			recoded
befpause	jsr chrget
	bcc ++		; time follows?

	jsr sgetstr	; no, string first
	sta $a9		; set address
	stx $a8
	ldy #0		; check length
-	cpy $69
	beq +
	lda ($a8),y	; sys out string
	jsr bsout
	iny
	bne -
+	jsr return	; and <return>
	jsr schkcom	; comma?

++	jsr sgetadr	; get time value to $65/$14
	lda #0
	sta zaesec
	sta zaeirq
-	jsr $ffe4		; sys getin keyboard
	cmp #$0d		; <return>?
	beq +
	lda zaesec	; check timer
	cmp $65
	bne -

+	jmp endsmb

; ----------------------------------------- resume?
; a81c
	sty doflag
	jsr chrget
	beq +++
	jmp whichdo

; ----------------------------------------- Part of FETCH
; a827
showcrsr	lda int		; check rvs flag (in helper)
	bne +
	lda fcursor,x
	bne ++
+	lda rcursor,x
++	jsr bsout
	dex
	bpl showcrsr
	rts

; ----------------------------------------- bef NRM
; a83a			enhanced
befnrm	jsr nrm00
	jmp nrm2

; a840
nrm00	lda #4		; video at $0400
	sta video
	lda #$c7		; VIC bank 0 ($0000)
nrm02	sta $dd00
	lda #$1b		; HIRES off
	sta $d011
	lda #$c8		; MULTI off
	sta $d016
	lda #$63
	sta gmemflag
	lda #$17		; lower case chars
nrm	sta $d018		; entry for CSET 
	rts

; ----------------------------------------- bef MOB OFF
; a85f			original
befmoboff	jsr sgetbytn
	lda $d015
	and mbittabl,x
	sta $d015
+++	jmp endsmb

; ----------------------------------------- bef OFF
; a86e			enhanced
endflash	jsr dec7a
befoff	ldx #0
-	lda flashing
	bmi -
	stx flashfl
	txa
-	sta flashfls,x
	inx
	cpx #16
	bcc -
	jmp bef0

; ----------------------------------------- bef ARC
; a887			enhanced
befarc	jsr arc1
	lda strz1
	sta $a8
	lda strz2
	sta $a9
	jmp doarc

; ----------------------------------------- 
; a897
arc1	jsr incbasbz
	lda #0
	sta drehsinn
	sta ueberdreh
	jsr sgetadr
	sty kmx
	sta kmx+1
	jsr schkcom
	jsr sgetadr
	sty kmy
	jsr schkcom
	jsr sgetadr
	sty $a8
	sta $a9
	jsr schkcom
	jsr sgetadr
	sty $ac
	sta $ad
	jsr schkcom
	jsr sgetadr
	sta winksw+1
	sty winksw
	lda $a9
	sta vgla+1
	lda $a8
	sta vgla
	lda $ad
	sta vgle+1
	lda $ac
	sta vgle
	jsr vglae
	bcc +
	lda drehsinn
	eor #$0a
	sta drehsinn
	ldx $ac
	ldy $ad
	lda $a8
	sta $ac
	lda $a9
	sta $ad
	stx $a8
	sty $a9
+	lda $ac
	sta strz1
	lda $ad
	sta strz2
getrxryf	jsr sgetbytc
	stx krx
	jsr sgetbytc
	stx kry
	jsr getpktf
; a91e
kreis	lda #$13
	sta $21
	jsr kreis1
	inc $21
	bne kreis1

; ----------------------------------------- Fallback from HIRES
; a929
nrm01	lda video
	cmp #$cc
	bne +
	lda #$c4
	!by $2c
+	lda #$c7	
	jsr nrm02
	
; ----------------------------------------- Part of CSET
; a938
csm0	ldx video
	cpx #$cc		; is MEM active?
	bne +
	eor #$2c		; yes, change values accordingly
+	jmp nrm
; a944
csetmem	pha
	jsr nrm01
	pla
	bne csm0

; ----------------------------------------- 
; a94b
kreis1	lda $a8
	pha
	lda $a9
	pha
	jsr a8a9div90
	jsr sinmalkrx
	sty $aa
	sta $ab
	jsr cosmalkry
	sty $ae
	sta $af
	jsr pkber
	lda $ae
	sta ay
	lda $aa
	sta ax
	lda $ab
	sta ax+1
	lda ax
	pha
	lda ay
	pha
	lda ax+1
	pha
	lda $21
	cmp #$13
	beq +
	jsr linzei
	jsr kerromein
+	pla
	sta ex+1
	pla
	sta ey
	pla
	sta ex
	pla
	sta $a9
	pla
	sta $a8
	lda $21
	cmp #$14
	beq +
	rts

+	lda drehsinn
	cmp #$0a
	bne +
	sec
	lda $a8
	sbc winksw
	sta $a8
	lda $a9
	sbc winksw+1
	sta $a9
	bcs ++
	lda #$0a
	sta ueberdreh
	lda #$68		; 360°
	sta $a8
	lda #1
	sta $a9
	jmp ++

+	clc
	lda $a8
	adc winksw
	sta $a8
	lda $a9
	adc winksw+1
	sta $a9
++	sta vgla+1
	lda $a8
	sta vgla
	lda $ad
	sta vgle+1
	lda $ac
	sta vgle
	lda drehsinn
	cmp #$0a
	bne +
	jmp kreis2

+	jsr vglae
	beq +
	bcc +
	rts

+	jmp kreis1

; ----------------------------------------- 
; aa03
sinmalkrx	jsr a8a9bogm
	jsr ssin
	jsr sfacarg
	lda krx
scm0	sta $63
	lda $a9
	sta $62
	jsr scflp
	jsr sfmult
	jmp sfacadr
; aa1e
cosmalkry	jsr a8a9bogm
	jsr scos
	jsr sfacarg
	lda kry
	jmp scm0
; aa2d
scflp	ldx #$90
	sec
	jmp sxflp
;aa33
a8a9bogm	lda $a8
	sta $63
	lda $a9
	sta $62
	jsr scflp
	jsr sfacarg
	lda #$a8		; sys PI
	ldy #$ae
	jsr sfldfack
	jsr sfmult
	jsr sfacarg	; returns .x=0
	stx $62
	lda #$b4		; 180 to 62/63
	sta $63
	jsr scflp
	lda $61
	jmp jsfdiv

; ----------------------------------------- part of DIR
; aa5c
fileopen	jsr $ffbd		; sys setnam
	ldx $ba
	lda #1
	ldy #0
	jsr $ffba		; sys setlfs
	jsr $ffc0		; sys OPEN
	bcc +
	tax		; .x=Error# (f.i.: 5)
	jmp ($0300)
+	jmp chkin1	; 9f35

; ----------------------------------------- 

	!by 0

; ----------------------------------------- 
; aa75
pkber	lda $20
	bne +
	jsr kmyminus
	jmp kmxplus

+	cmp #1
	bne +
	jsr kmyplus
	jmp kmxplus

+	cmp #2
	bne +
	jsr kmxminus
	jmp kmyplus

+	jsr kmxminus
	jmp kmyminus
; aa99
kmxplus	clc
	lda $aa
	adc kmx
	sta $aa
	lda $ab
	adc kmx+1
	sta $ab
	rts
; aaa9
kmyplus	clc
	lda $ae
	adc kmy
	sta $ae
	rts
; aab2
kmxminus	sec
	lda kmx
	sbc $aa
	sta $aa
	lda kmx+1
	sbc $ab
	sta $ab
	bcs +
	lda #0
	sta $aa
	sta $ab
+	rts
; aaca
kmyminus	sec
	lda kmy
	sbc $ae
	sta $ae
	bcs +
	lda #0
	sta $ae
+	rts
; aad9
a8a9div90	lda #$5a		; 90
	sta idivsor
	lda #0
	sta idivsor+1
	lda $a8
	sta idivdend
	lda $a9
	sta idivdend+1
	jsr idiv
	lda idivrest
	sta $a8
	lda idivrest+1
	sta $a9
	lda idivdend
	sta $20
	cmp #1
	beq +
	cmp #3
	beq +
	rts
; ab08
+	sec
	lda #$5a
	sbc $a8
	sta $a8
	lda $20
	rts

; ----------------------------------------- bef ANGL
; ab12			original
befangl	jsr incbasbz
	jsr sgetadr
	sty kmx
	sty ex
	sta kmx+1
	sta ex+1
	jsr schkcom
	jsr sgetadr
	sty kmy
	sty ey
	sta kmy+1
	sta ey+1
	jsr schkcom
	jsr sgetadr
	sty $a8
	sta $a9
	jsr sgetbytc
	stx krx
	jsr sgetbytc
	stx kry
	jsr getpktf
doarc	lda #$0a
	sta $21
	jsr kreis1
	jmp endsmb

; ----------------------------------------- 
; ab59
kreis2	jsr vglae
	beq +
	bcs +
	lda ueberdreh
	cmp #$0a
	bne +
	rts

+	jmp kreis1

; ----------------------------------------- tokenizer
; ab6b
zum2	jmp tok5		; continue with next char

; ----------------------------------------- 
; ab6e
zeiumw1	ldy #5		; entry point, .y=index in basic line
zum0	lda $01fb,y	; read from $0200 (up to $00)
	bne +
--	rts
; ab76
+	cmp #$22		; string?
	bne +
-	iny		; yes, skip string
	lda $01fb,y	; up to line end
	beq --
	cmp #$22		; or next quote
	bne -
	beq zum2		; then continue
; ab86
+	cmp #$40		; "@"? (precedes DESIGN lines)
	bne +
zum1	iny		; yes, skip this line
	lda $01fb,y
	bne zum1
	beq zum0		; and leave

+	cmp #$44		; "d"? (could be DATA)
	bne ++
	pha		; yes, "d", store to stack
	tya
	pha
	ldx #$ff
-	inx		; is it DATA?
	iny
	lda $01fb,y
	cmp ata,x		; "ata"?
	bne +
	cpx #2
	bne -
	pla		; yes, restore
	tay
	pla
	bne zum1		; and skip this line
+	pla		; no, restore
	tay
	pla
++	cmp #$41		; Buchstabe?
	bcc zum2
	cmp #$db
	bcs zum2

	sty zwisp2	; wenn nicht: weiterscannen, store .y
	ldx #>tabbef	; Liste der Befehlsworte ansteuern
	stx $21
	ldx #<tabbef
	stx $20

	ldx #0
	stx codezae	; Tokenzähler auf null setzen
tok3	cmp ($20,x)	; Zeichen in Befehlswort enthalten?
	beq abee		; ja (!!! Trick: springt auf INY)

	and #$7f		; nein, Bit 7 aus (geshiftet?)
	cmp ($20,x)	; jetzt im Befehlswort?
	beq tok0		; ja, Befehl gefunden

	lda ($20,x)
	cmp #$40		; "@"? (Ende des Befehlswortes?)
	beq tok1

-	lda ($20,x)	; end of line?
	beq tok5		; ja, fertig, Zeile tokenisiert
	cmp #$40		; "@"? (Ende des Befehlswortes?)
	beq tok2		; ja, Tokenzähler erhöhen
	inc $20		; weiterscannen (in Befehlsliste)
	bne -
	inc $21
	bne -
; abe9
tok2	inc codezae	; Vergleich negativ, Tokenzähler plus 1
	ldy zwisp2	; Index in Basiczeile holen, nicht erhöhen!

	!by $a9		; LDA #$c8 ($abee: $c8=INY!)
abee	iny		; (nächstes) Zeichen ansteuern
	lda $01fb,y
	inc $20		; Zeiger in Befehlsliste erhöhen
	bne tok3		; nächstes Zeichen vergleichen
	inc $21
	bne tok3

tok0	cpy zwisp2	; Buchstabe ist geshiftet:
	beq tok5		; nein, falsche Stelle im Befehlswort
	iny
tok1	ldx zwisp2
	lda #$64		; yes, write token prefix ($64)
	sta $01fb,x
	inx
	lda codezae	; and write token counter
	sta $01fb,x
	inc $01fb,x	; and increase by one

	cmp #$40		; bef DISAPA? (Token 65)
	bne tok4

	lda #$3a		; yes, write 4 colons to DISAPA
	ldy #0		; (results in 5 colons if one followed DISAPA
-	inx		; and in 4 if DISAPA was shifted)
	iny
	sta $01fb,x	; (SECURE 0 writes $00 $3a to token position)
	cpy #4
	bmi -
	txa
	tay
	jmp zum0		; continue scan

tok4	dey		; and move rest of line to earlier position
-	iny
	inx
	lda $01fb,y	; until end of line
	sta $01fb,x
	bne -

-	inx		; then set new end of line
	lda #0
	sta $01fb,x
	lda $01fc,x	; until old end of line
	bne -
	ldy zwisp2	; get index in moved line
	iny

tok5	iny		; continue with next char in basic line
	jmp zum0

; ----------------------------------------- part of USE
; ac48
use4	sta $43		; len of ctrl string
	stx $49		; and address
	sty $4a
	cmp #$59		; >88 chars?
	bcs +		; yes, error
	rts

+	jmp err23		; error "string too large"

; ----------------------------------------- 
; ac56
jsfdiv	ldy $70
	jmp sfdiv

; ----------------------------------------- 

	!by 0

; ----------------------------------------- 
; ac5c
ata	!by $41,$54,$41

; ----------------------------------------- 
; ac5f
;
; End of part 4
;



